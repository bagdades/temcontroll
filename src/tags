!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADCInit	tempcontroll.c	/^void ADCInit(void)$/;"	f	signature:(void)
ADCInit	tempcontroll.h	/^void ADCInit		(void);$/;"	p	signature:(void)
ADCRead	tempcontroll.c	/^int16_t ADCRead(uint8_t chanel)$/;"	f	signature:(uint8_t chanel)
ADCRead	tempcontroll.h	/^int16_t ADCRead		(uint8_t chanel);$/;"	p	signature:(uint8_t chanel)
ADC_VREF_TYPE	tempcontroll.h	42;"	d
AS	Makefile	/^AS = avr-gcc$/;"	m
CC	Makefile	/^CC = avr-gcc$/;"	m
CP	Makefile	/^CP = avr-objcopy$/;"	m
DEBUG	lcd.h	4;"	d
DIG_1	lcd.h	13;"	d
DIG_2	lcd.h	14;"	d
DIG_3	lcd.h	15;"	d
DIG_DDR	lcd.h	12;"	d
DIG_MASK	lcd.h	18;"	d
DIG_P	lcd.h	17;"	d
DIG_PORT	lcd.h	11;"	d
EEMEM	tempcontroll.c	/^uint16_t setTempEeprom EEMEM = 200;$/;"	v
ENCODER_INC	encoder.h	2;"	d
ENC_A_PIN	encoder.h	12;"	d
ENC_B_PIN	encoder.h	13;"	d
ENC_DDR	encoder.h	9;"	d
ENC_Init	encoder.c	/^void ENC_Init(int16_t startValue)$/;"	f	signature:(int16_t startValue)
ENC_Init	encoder.h	/^void ENC_Init(int16_t startValue);$/;"	p	signature:(int16_t startValue)
ENC_MASK	encoder.h	15;"	d
ENC_PIN	encoder.h	10;"	d
ENC_PORT	encoder.h	8;"	d
ENC_Scan	encoder.c	/^uint8_t  ENC_Scan(int16_t* value)$/;"	f	signature:(int16_t* value)
ENC_Scan	encoder.h	/^uint8_t ENC_Scan(int16_t* value);$/;"	p	signature:(int16_t* value)
FALSE	tempcontroll.h	/^	FALSE = 0,$/;"	e	enum:__anon1
F_CPU	usart.h	7;"	d
ISR	tempcontroll.c	/^ISR(TIMER0_OVF_vect)$/;"	f
ISR	usart.c	/^ISR(USART_RX_vect){$/;"	f
ISR	usart.c	/^ISR(USART_TX_vect)$/;"	f
Init	tempcontroll.c	/^void Init(void)$/;"	f	signature:(void)
Init	tempcontroll.h	/^void Init			(void);$/;"	p	signature:(void)
KeyScan	tempcontroll.h	/^void KeyScan		(void);$/;"	p	signature:(void)
LCD_DDR	lcd.h	10;"	d
LCD_INC	lcd.h	2;"	d
LCD_PORT	lcd.h	9;"	d
LD	Makefile	/^LD = avr-gcc$/;"	m
LED_DDR	tempcontroll.h	27;"	d
LED_OFF	tempcontroll.h	30;"	d
LED_ON	tempcontroll.h	29;"	d
LED_OUT	tempcontroll.h	28;"	d
LED_PORT	tempcontroll.h	26;"	d
LcdInit	lcd.c	/^void LcdInit(void)$/;"	f	signature:(void)
LcdInit	lcd.h	/^void LcdInit(void);$/;"	p	signature:(void)
LcdUpdate	lcd.c	/^void LcdUpdate(uint8_t* data)$/;"	f	signature:(uint8_t* data)
LcdUpdate	lcd.h	/^void LcdUpdate(uint8_t* data);$/;"	p	signature:(uint8_t* data)
MAX_TEMP	tempcontroll.h	22;"	d
MCU	Makefile	/^MCU = mcu=atmega48pa$/;"	m
MIN_TEMP	tempcontroll.h	23;"	d
MODE_FOUR	tempcontroll.h	/^	MODE_FOUR$/;"	e	enum:__anon2
MODE_ONE	tempcontroll.h	/^	MODE_ONE = 0,$/;"	e	enum:__anon2
MODE_THREE	tempcontroll.h	/^	MODE_THREE,$/;"	e	enum:__anon2
MODE_TWO	tempcontroll.h	/^	MODE_TWO,$/;"	e	enum:__anon2
OD	Makefile	/^OD = avr-objdump$/;"	m
PERIOD_ADC_READ	tempcontroll.h	18;"	d
PERIOD_KEY_SCAN	tempcontroll.h	16;"	d
PERIOD_LCD_UPDATE	tempcontroll.h	17;"	d
PERIOD_TEMP_UPDATE	tempcontroll.h	19;"	d
PROGMEM	lcd.h	/^static const uint8_t sevenSegmentCod[] PROGMEM = {$/;"	v
REL1	tempcontroll.h	34;"	d
REL1_OFF	tempcontroll.h	38;"	d
REL1_ON	tempcontroll.h	37;"	d
REL2	tempcontroll.h	35;"	d
REL2_OFF	tempcontroll.h	40;"	d
REL2_ON	tempcontroll.h	39;"	d
REL_DDR	tempcontroll.h	33;"	d
REL_MASK	tempcontroll.h	36;"	d
REL_PORT	tempcontroll.h	32;"	d
RM	Makefile	/^RM = rm$/;"	m
ResultBcd	tempcontroll.c	/^void ResultBcd(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4])$/;"	f	signature:(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4])
ResultBcd	tempcontroll.h	/^void ResultBcd		(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4]);$/;"	p	signature:(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4])
SZ	Makefile	/^SZ = avr-size$/;"	m
SaveEepromMode	tempcontroll.c	/^void SaveEepromMode(void)$/;"	f	signature:(void)
SaveEepromMode	tempcontroll.h	/^void SaveEepromMode	(void);$/;"	p	signature:(void)
T0_FREQ	tempcontroll.h	12;"	d
T0_INIT	tempcontroll.h	13;"	d
T0_PRESC	tempcontroll.h	11;"	d
TARGET	Makefile	/^TARGET = tempcontroll$/;"	m
TEMPCONTROLL_INC	tempcontroll.h	2;"	d
TIME_SET_TEMP_VISIBLE	tempcontroll.h	21;"	d
TIME_WRITE_EEPROM	tempcontroll.h	20;"	d
TRUE	tempcontroll.h	/^	TRUE$/;"	e	enum:__anon1
Timer0Init	tempcontroll.c	/^void Timer0Init(void)$/;"	f	signature:(void)
Timer0Init	tempcontroll.h	/^void Timer0Init		(void);$/;"	p	signature:(void)
USART_BAUDRATE	usart.h	9;"	d
USART_BAUDRATE_DIV	usart.h	12;"	d
USART_INC	usart.h	2;"	d
USART_RX_BUFFER_SIZE	usart.h	11;"	d
USART_TX_BUFFER_SIZE	usart.h	10;"	d
UsartGetChar	usart.c	/^uint8_t  UsartGetChar(void){$/;"	f	signature:(void)
UsartGetChar	usart.h	/^uint8_t UsartGetChar	(void);$/;"	p	signature:(void)
UsartInit	usart.c	/^void UsartInit(void){$/;"	f	signature:(void)
UsartInit	usart.h	/^void UsartInit			(void);$/;"	p	signature:(void)
UsartPutChar	usart.c	/^void UsartPutChar(uint8_t ch){$/;"	f	signature:(uint8_t ch)
UsartPutChar	usart.h	/^void UsartPutChar		(uint8_t ch);$/;"	p	signature:(uint8_t ch)
UsartPutString	usart.c	/^void UsartPutString(uint8_t *string){$/;"	f	signature:(uint8_t *string)
UsartPutString	usart.h	/^void UsartPutString		(uint8_t *string);$/;"	p	signature:(uint8_t *string)
_DOWN	tempcontroll.h	/^	_DOWN$/;"	e	enum:keyPad
_UP	tempcontroll.h	/^	_UP = 1,$/;"	e	enum:keyPad
_flag	tempcontroll.h	/^volatile struct _flag{$/;"	s
_flag::adcRead	tempcontroll.h	/^	uint16_t adcRead:		1;$/;"	m	struct:_flag	access:public
_flag::digPoint	tempcontroll.h	/^	uint16_t digPoint:		1;$/;"	m	struct:_flag	access:public
_flag::eepromWrite	tempcontroll.h	/^	uint16_t eepromWrite:	1;$/;"	m	struct:_flag	access:public
_flag::keyScan	tempcontroll.h	/^	uint16_t keyScan:		1;$/;"	m	struct:_flag	access:public
_flag::lcdUpdate	tempcontroll.h	/^	uint16_t lcdUpdate:		1;$/;"	m	struct:_flag	access:public
_flag::modeEepromWrite	tempcontroll.h	/^	uint16_t modeEepromWrite:1;$/;"	m	struct:_flag	access:public
_flag::readTemp	tempcontroll.h	/^	uint16_t readTemp:		1;$/;"	m	struct:_flag	access:public
_flag::setTempVisible	tempcontroll.h	/^	uint16_t setTempVisible:	1;$/;"	m	struct:_flag	access:public
_flag::tempEepromWrite	tempcontroll.h	/^	uint16_t tempEepromWrite:1;$/;"	m	struct:_flag	access:public
adcRead	tempcontroll.h	/^	uint16_t adcRead:		1;$/;"	m	struct:_flag	access:public
adcResult	main.c	/^int16_t adcResult;$/;"	v
ch	usart.c	/^	uint8_t ch = 0;$/;"	l
count	lcd.c	/^	static uint8_t count = 0;$/;"	l	file:
countSetTempVisible	tempcontroll.c	/^volatile uint16_t countSetTempVisible = 0;$/;"	v
countTimeAdcRead	tempcontroll.c	/^volatile uint8_t countTimeAdcRead = PERIOD_ADC_READ;$/;"	v
countTimeKeyScan	tempcontroll.c	/^volatile uint8_t countTimeKeyScan = PERIOD_KEY_SCAN;$/;"	v
countTimeLcdUpdate	tempcontroll.c	/^volatile uint8_t countTimeLcdUpdate = PERIOD_LCD_UPDATE;$/;"	v
countTimeTempRead	tempcontroll.c	/^volatile uint16_t countTimeTempRead = PERIOD_TEMP_UPDATE;$/;"	v
countTimeWriteEeprom	tempcontroll.c	/^volatile uint16_t countTimeWriteEeprom = 0;$/;"	v
currTemperature	main.c	/^uint16_t currTemperature;$/;"	v
dataOut_	main.c	/^uint8_t dataOut_[4] = {1, 1, 2, 3};$/;"	v
digPoint	tempcontroll.h	/^	uint16_t digPoint:		1;$/;"	m	struct:_flag	access:public
eepromWrite	tempcontroll.h	/^	uint16_t eepromWrite:	1;$/;"	m	struct:_flag	access:public
encState	encoder.c	/^static uint8_t encState = 0;$/;"	v	file:
encValue	encoder.c	/^static volatile int16_t encValue = 0;$/;"	v	file:
flag	tempcontroll.h	/^}flag;$/;"	v	typeref:struct:_flag
fullState	encoder.c	/^	uint8_t fullState = newState | (encState << 2);$/;"	l
histerezis	main.c	/^			static uint8_t histerezis = 0;$/;"	l	file:
i	tempcontroll.c	/^	uint8_t i;$/;"	l
i	usart.c	/^	uint16_t i = USART_BAUDRATE_DIV;$/;"	l
keyPad	tempcontroll.h	/^enum keyPad{$/;"	g
keyScan	tempcontroll.h	/^	uint16_t keyScan:		1;$/;"	m	struct:_flag	access:public
lcdUpdate	tempcontroll.h	/^	uint16_t lcdUpdate:		1;$/;"	m	struct:_flag	access:public
main	main.c	/^int main(void)$/;"	f	signature:(void)
modeEepromWrite	tempcontroll.h	/^	uint16_t modeEepromWrite:1;$/;"	m	struct:_flag	access:public
newState	encoder.c	/^	uint8_t newState = ENC_PIN >> 6;$/;"	l
readTemp	tempcontroll.h	/^	uint16_t readTemp:		1;$/;"	m	struct:_flag	access:public
rxCountBuffer	usart.c	/^volatile uint8_t rxCountBuffer;$/;"	v
rxHeadBuffer	usart.c	/^volatile uint8_t rxHeadBuffer;$/;"	v
rxTailBuffer	usart.c	/^volatile uint8_t rxTailBuffer;$/;"	v
setTemp	tempcontroll.c	/^int16_t setTemp;$/;"	v
setTempVisible	tempcontroll.h	/^	uint16_t setTempVisible:	1;$/;"	m	struct:_flag	access:public
tempData	main.c	/^			int16_t tempData;$/;"	l
tempEepromWrite	tempcontroll.h	/^	uint16_t tempEepromWrite:1;$/;"	m	struct:_flag	access:public
txCountBuffer	usart.c	/^volatile uint8_t txCountBuffer;$/;"	v
txHeadBuffer	usart.c	/^volatile uint8_t txHeadBuffer;$/;"	v
txTailBuffer	usart.c	/^volatile uint8_t txTailBuffer;$/;"	v
usartRxBuffer	usart.h	/^volatile uint8_t usartRxBuffer[USART_TX_BUFFER_SIZE];$/;"	v
usartTxBuffer	usart.h	/^volatile uint8_t usartTxBuffer[USART_TX_BUFFER_SIZE];$/;"	v
