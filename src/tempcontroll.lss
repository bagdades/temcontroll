
tempcontroll.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000074c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080010a  0080010a  0000080a  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000012d1  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000baf  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000753  00000000  00000000  000027fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e8  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006ae  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000053e  00000000  00000000  000037ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	54 c0       	rjmp	.+168    	; 0xca <__vector_16>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	1a c3       	rjmp	.+1588   	; 0x65a <__vector_18>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	ec c2       	rjmp	.+1496   	; 0x602 <__vector_20>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>
  34:	6e c1       	rjmp	.+732    	; 0x312 <__stack+0x13>
  36:	66 c1       	rjmp	.+716    	; 0x304 <__stack+0x5>
  38:	9e c1       	rjmp	.+828    	; 0x376 <__stack+0x77>
  3a:	64 c1       	rjmp	.+712    	; 0x304 <__stack+0x5>
  3c:	9c c1       	rjmp	.+824    	; 0x376 <__stack+0x77>
  3e:	9b c1       	rjmp	.+822    	; 0x376 <__stack+0x77>
  40:	68 c1       	rjmp	.+720    	; 0x312 <__stack+0x13>
  42:	67 c1       	rjmp	.+718    	; 0x312 <__stack+0x13>
  44:	98 c1       	rjmp	.+816    	; 0x376 <__stack+0x77>
  46:	97 c1       	rjmp	.+814    	; 0x376 <__stack+0x77>
  48:	5d c1       	rjmp	.+698    	; 0x304 <__stack+0x5>
  4a:	95 c1       	rjmp	.+810    	; 0x376 <__stack+0x77>
  4c:	5b c1       	rjmp	.+694    	; 0x304 <__stack+0x5>
  4e:	61 c1       	rjmp	.+706    	; 0x312 <__stack+0x13>

00000050 <__trampolines_end>:
  50:	c0 f9       	bld	r28, 0
  52:	a4 b0       	in	r10, 0x04	; 4
  54:	99 92       	st	Y+, r9
  56:	82 f8       	bld	r8, 2
  58:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__EEPROM_REGION_LENGTH__+0x7f00bf>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d2 e0       	ldi	r29, 0x02	; 2
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e4       	ldi	r30, 0x4C	; 76
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 30       	cpi	r26, 0x0A	; 10
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	aa e0       	ldi	r26, 0x0A	; 10
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a8 34       	cpi	r26, 0x48	; 72
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	a5 d1       	rcall	.+842    	; 0x3da <main>
  90:	5b c3       	rjmp	.+1718   	; 0x748 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <Init>:
volatile uint16_t countSetTempVisible = 0;


void Init(void)
{
	LED_DDR |= (1 << LED_OUT);
  94:	53 9a       	sbi	0x0a, 3	; 10
	LED_OFF();
  96:	5b 9a       	sbi	0x0b, 3	; 11
	REL_DDR |= REL_MASK;//Pin to output
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	80 63       	ori	r24, 0x30	; 48
  9c:	8a b9       	out	0x0a, r24	; 10
	REL_PORT &= ~REL_MASK;//Relays off
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 7c       	andi	r24, 0xCF	; 207
  a2:	8b b9       	out	0x0b, r24	; 11
	setTemp = eeprom_read_word(&setTempEeprom);//read from eeprom temp value
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2b d3       	rcall	.+1622   	; 0x700 <eeprom_read_word>
  aa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setTemp+0x1>
  ae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setTemp>
  b2:	08 95       	ret

000000b4 <Timer0Init>:
void Timer0Init(void)
{
#if(F_CPU != 8000000)
#error ***You must set TCCR0
#endif
	TCCR0B|=(1<<CS02)|(1<<CS00);//T0_PRESC = 1024
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
	TCNT0 = T0_INIT;
  ba:	88 ef       	ldi	r24, 0xF8	; 248
  bc:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);//enable interrupt overllow timer0
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	TCNT0 = T0_INIT;
  d8:	88 ef       	ldi	r24, 0xF8	; 248
  da:	86 bd       	out	0x26, r24	; 38
	countTimeKeyScan --;
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
	countTimeLcdUpdate --;
  e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
	countTimeAdcRead --;
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
	countTimeTempRead --;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(!countTimeKeyScan)
 10c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
 110:	81 11       	cpse	r24, r1
 112:	08 c0       	rjmp	.+16     	; 0x124 <__vector_16+0x5a>
	{
		countTimeKeyScan = PERIOD_KEY_SCAN;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
		flag.keyScan = TRUE;
 11a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeLcdUpdate)
 124:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
 128:	81 11       	cpse	r24, r1
 12a:	08 c0       	rjmp	.+16     	; 0x13c <__vector_16+0x72>
	{
		countTimeLcdUpdate = PERIOD_LCD_UPDATE;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
		flag.lcdUpdate = TRUE;
 132:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeAdcRead)
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
 140:	81 11       	cpse	r24, r1
 142:	08 c0       	rjmp	.+16     	; 0x154 <__vector_16+0x8a>
	{
		countTimeAdcRead = PERIOD_ADC_READ;
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
		flag.adcRead = TRUE;
 14a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeTempRead)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	59 f4       	brne	.+22     	; 0x176 <__vector_16+0xac>
	{
		countTimeTempRead = PERIOD_TEMP_UPDATE;
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		flag.readTemp = TRUE;
 16c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flag+0x1>
	}
	if(countTimeWriteEeprom)
 176:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 17a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 17e:	89 2b       	or	r24, r25
 180:	a1 f0       	breq	.+40     	; 0x1aa <__vector_16+0xe0>
	{
		countTimeWriteEeprom --;
 182:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 186:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <countTimeWriteEeprom+0x1>
 190:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <countTimeWriteEeprom>
		if(countTimeWriteEeprom == 0)
 194:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 198:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	29 f4       	brne	.+10     	; 0x1aa <__vector_16+0xe0>
			flag.eepromWrite = TRUE;
 1a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(countSetTempVisible)
 1aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	a1 f0       	breq	.+40     	; 0x1de <__vector_16+0x114>
	{
		countSetTempVisible --;
 1b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if(countSetTempVisible == 0)
 1c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1cc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	29 f4       	brne	.+10     	; 0x1de <__vector_16+0x114>
			flag.setTempVisible = FALSE;
 1d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
}
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <ADCInit>:
void ADCInit(void)
{
#if(F_CPU != 8000000)
#error ***You must set ADCSRA
#endif
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADEN); //PRESC F_CPU/64
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	86 68       	ori	r24, 0x86	; 134
 1f4:	80 83       	st	Z, r24
	ADMUX &= ~ADC_VREF_TYPE; //AREF, Internal Vref turned off
 1f6:	ec e7       	ldi	r30, 0x7C	; 124
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <ADCRead>:
}

int16_t ADCRead(uint8_t chanel)
{
	/* ADMUX = ADC_VREF_TYPE | chanel; */
	ADMUX &= ~ADC_VREF_TYPE;
 202:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 206:	9f 73       	andi	r25, 0x3F	; 63
 208:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADMUX |= chanel;
 20c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 210:	89 2b       	or	r24, r25
 212:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	8a e1       	ldi	r24, 0x1A	; 26
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <ADCRead+0x16>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <ADCRead+0x1c>
	_delay_us(10);//delay needed for stabilization of the ACD input voltag
	ADCSRA |= (1 << ADSC);//start convertion
 21e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	while ((ADCSRA & (1 << ADIF)) == 0);//wait for complete conversion
 228:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 22c:	84 ff       	sbrs	r24, 4
 22e:	fc cf       	rjmp	.-8      	; 0x228 <ADCRead+0x26>
	ADCSRA |=(1 << ADIF);
 230:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 234:	80 61       	ori	r24, 0x10	; 16
 236:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	/* flag.adcRead = FALSE; */
	return ADCW;
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
 242:	08 95       	ret

00000244 <ResultBcd>:

void ResultBcd(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4])
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
 24a:	f9 01       	movw	r30, r18
	uint8_t i;
	if(contrlValue > upLimit)
 24c:	46 17       	cp	r20, r22
 24e:	57 07       	cpc	r21, r23
 250:	30 f4       	brcc	.+12     	; 0x25e <ResultBcd+0x1a>
	{//якщо обрив датчика ,або коротке замикання
		for (i = 0; i <= 3; i++) 
		{
			dataOut[i] = 10;//виводимо на дисплей рисочки
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	80 83       	st	Z, r24
 256:	81 83       	std	Z+1, r24	; 0x01
 258:	82 83       	std	Z+2, r24	; 0x02
 25a:	83 83       	std	Z+3, r24	; 0x03
 25c:	0f c0       	rjmp	.+30     	; 0x27c <ResultBcd+0x38>
		}
		return ;
	}
	dataOut[1] = data/100;
 25e:	64 e6       	ldi	r22, 0x64	; 100
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	27 d2       	rcall	.+1102   	; 0x6b2 <__udivmodhi4>
 264:	61 83       	std	Z+1, r22	; 0x01
	dataOut[2] = (data / 10) % 10;
 266:	2a e0       	ldi	r18, 0x0A	; 10
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	ce 01       	movw	r24, r28
 26c:	b9 01       	movw	r22, r18
 26e:	21 d2       	rcall	.+1090   	; 0x6b2 <__udivmodhi4>
 270:	48 2f       	mov	r20, r24
 272:	cb 01       	movw	r24, r22
 274:	b9 01       	movw	r22, r18
 276:	1d d2       	rcall	.+1082   	; 0x6b2 <__udivmodhi4>
 278:	82 83       	std	Z+2, r24	; 0x02
	dataOut[3] = data % 10;
 27a:	43 83       	std	Z+3, r20	; 0x03
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <SaveEepromMode>:

void SaveEepromMode(void)
{
	if(flag.tempEepromWrite)
 282:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 286:	85 ff       	sbrs	r24, 5
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <SaveEepromMode+0x20>
	{
		eeprom_write_word(&setTempEeprom,setTemp);
 28a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <setTemp>
 28e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <setTemp+0x1>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	38 d2       	rcall	.+1136   	; 0x708 <eeprom_write_word>
		flag.tempEepromWrite = FALSE;
 298:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	flag.eepromWrite = FALSE;
 2a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 2a6:	87 7f       	andi	r24, 0xF7	; 247
 2a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
 2ac:	08 95       	ret

000002ae <ENC_Init>:
static uint8_t encState = 0;
static volatile int16_t encValue = 0;

void ENC_Init(int16_t startValue)
{
	ENC_DDR &= ~ENC_MASK;// In
 2ae:	2a b1       	in	r18, 0x0a	; 10
 2b0:	2f 73       	andi	r18, 0x3F	; 63
 2b2:	2a b9       	out	0x0a, r18	; 10
	ENC_PORT |= ENC_MASK;//Pull-up
 2b4:	2b b1       	in	r18, 0x0b	; 11
 2b6:	20 6c       	ori	r18, 0xC0	; 192
 2b8:	2b b9       	out	0x0b, r18	; 11
	encValue = startValue << 2;
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encValue+0x1>
 2c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encValue>
 2ca:	08 95       	ret

000002cc <ENC_Scan>:
}

uint8_t  ENC_Scan(int16_t* value, uint16_t maxValue)
{
 2cc:	dc 01       	movw	r26, r24
 2ce:	9b 01       	movw	r18, r22
	uint8_t newState = ENC_PIN >> 6;
 2d0:	99 b1       	in	r25, 0x09	; 9
 2d2:	92 95       	swap	r25
 2d4:	96 95       	lsr	r25
 2d6:	96 95       	lsr	r25
 2d8:	93 70       	andi	r25, 0x03	; 3
	uint8_t fullState = newState | (encState << 2);
	switch (fullState) 
 2da:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <encState>
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	48 9f       	mul	r20, r24
 2e2:	a0 01       	movw	r20, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	e9 2f       	mov	r30, r25
 2e8:	e4 2b       	or	r30, r20
 2ea:	4e 2f       	mov	r20, r30
 2ec:	ee 0f       	add	r30, r30
 2ee:	55 0b       	sbc	r21, r21
 2f0:	66 0b       	sbc	r22, r22
 2f2:	77 0b       	sbc	r23, r23
 2f4:	fa 01       	movw	r30, r20
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	ee 30       	cpi	r30, 0x0E	; 14
 2fa:	f1 05       	cpc	r31, r1
 2fc:	e0 f5       	brcc	.+120    	; 0x376 <__stack+0x77>
 2fe:	e6 5e       	subi	r30, 0xE6	; 230
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	09 94       	ijmp
	{
		case 0x2: case 0x4: case 0xB: case 0xD:
			encValue--;
 304:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <encValue>
 308:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <encValue+0x1>
 30c:	41 50       	subi	r20, 0x01	; 1
 30e:	51 09       	sbc	r21, r1
 310:	06 c0       	rjmp	.+12     	; 0x31e <__stack+0x1f>
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
 312:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <encValue>
 316:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <encValue+0x1>
 31a:	4f 5f       	subi	r20, 0xFF	; 255
 31c:	5f 4f       	sbci	r21, 0xFF	; 255
 31e:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <encValue+0x1>
 322:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <encValue>
			break;
		default:
			return FALSE;
			break;
	}
	encState = newState;
 326:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <encState>
	if (encValue > (maxValue << 2)) 
 32a:	b9 01       	movw	r22, r18
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encValue>
 338:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encValue+0x1>
 33c:	68 17       	cp	r22, r24
 33e:	79 07       	cpc	r23, r25
 340:	20 f4       	brcc	.+8      	; 0x34a <__stack+0x4b>
	{
		encValue = (maxValue << 2);
 342:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <encValue+0x1>
 346:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <encValue>
	}
	if (encValue < 0) 
 34a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encValue>
 34e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encValue+0x1>
 352:	97 ff       	sbrs	r25, 7
 354:	04 c0       	rjmp	.+8      	; 0x35e <__stack+0x5f>
	{
		encValue = 0;
 356:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encValue+0x1>
 35a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encValue>
	}
	*value = encValue >> 2;
 35e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encValue>
 362:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encValue+0x1>
 366:	95 95       	asr	r25
 368:	87 95       	ror	r24
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	8d 93       	st	X+, r24
 370:	9c 93       	st	X, r25
	return TRUE;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
			break;
		default:
			return FALSE;
 376:	80 e0       	ldi	r24, 0x00	; 0
	{
		encValue = 0;
	}
	*value = encValue >> 2;
	return TRUE;
}
 378:	08 95       	ret

0000037a <LcdInit>:

#include "lcd.h"

void LcdInit(void)
{
	LCD_DDR = 0xFF;			//port out
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	94 b9       	out	0x04, r25	; 4
	DIG_DDR |= DIG_MASK;	//port out
 37e:	87 b1       	in	r24, 0x07	; 7
 380:	88 63       	ori	r24, 0x38	; 56
 382:	87 b9       	out	0x07, r24	; 7
	DIG_PORT |= DIG_MASK;	//hight level, off all digits
 384:	88 b1       	in	r24, 0x08	; 8
 386:	88 63       	ori	r24, 0x38	; 56
 388:	88 b9       	out	0x08, r24	; 8
	LCD_PORT = 0xFF; //Off all segments
 38a:	95 b9       	out	0x05, r25	; 5
 38c:	08 95       	ret

0000038e <LcdUpdate>:
}

void LcdUpdate(uint8_t* data)
{
	static uint8_t count = 0;
	DIG_PORT |= DIG_MASK; //Off all digits
 38e:	28 b1       	in	r18, 0x08	; 8
 390:	28 63       	ori	r18, 0x38	; 56
 392:	28 b9       	out	0x08, r18	; 8
	if(count == 0)
 394:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <count.1771>
 398:	21 11       	cpse	r18, r1
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <LcdUpdate+0x12>
	{
		DIG_PORT &= ~(1 << DIG_3);
 39c:	45 98       	cbi	0x08, 5	; 8
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
        /* View mode heating */
	}
	else if(count == 1)
 3a0:	21 30       	cpi	r18, 0x01	; 1
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <LcdUpdate+0x1a>
	{
		DIG_PORT &= ~(1 << DIG_2);
 3a4:	44 98       	cbi	0x08, 4	; 8
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
	}
	else if(count == 2)
 3a8:	22 30       	cpi	r18, 0x02	; 2
 3aa:	61 f4       	brne	.+24     	; 0x3c4 <LcdUpdate+0x36>
	{
		DIG_PORT &= ~(1 << DIG_1);
 3ac:	43 98       	cbi	0x08, 3	; 8
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
 3ae:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <count.1771>
 3b2:	fc 01       	movw	r30, r24
 3b4:	e2 0f       	add	r30, r18
 3b6:	f1 1d       	adc	r31, r1
 3b8:	e1 81       	ldd	r30, Z+1	; 0x01
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e0 5b       	subi	r30, 0xB0	; 176
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	e4 91       	lpm	r30, Z
 3c2:	e5 b9       	out	0x05, r30	; 5
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 3c4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count.1771>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
	if(count > 2)
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	18 f4       	brcc	.+6      	; 0x3d4 <LcdUpdate+0x46>
		DIG_PORT &= ~(1 << DIG_1);
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 3ce:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count.1771>
 3d2:	08 95       	ret
	if(count > 2)
		count = 0;
 3d4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count.1771>
 3d8:	08 95       	ret

000003da <main>:
uint16_t currTemperature;

int main(void)
{
	uint8_t histerezis = 0;
	UsartInit();
 3da:	b5 d0       	rcall	.+362    	; 0x546 <UsartInit>
	LcdInit();
 3dc:	ce df       	rcall	.-100    	; 0x37a <LcdInit>
	Timer0Init();
 3de:	6a de       	rcall	.-812    	; 0xb4 <Timer0Init>
	ADCInit();
 3e0:	05 df       	rcall	.-502    	; 0x1ec <ADCInit>
	Init();
 3e2:	58 de       	rcall	.-848    	; 0x94 <Init>
	ENC_Init(setTemp);
 3e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setTemp>
 3e8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setTemp+0x1>
 3ec:	60 df       	rcall	.-320    	; 0x2ae <ENC_Init>
	sei();
 3ee:	78 94       	sei
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3f0:	80 ed       	ldi	r24, 0xD0	; 208
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 3f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	flag.setTempVisible = TRUE;
 3fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
int16_t adcResult;
uint16_t currTemperature;

int main(void)
{
	uint8_t histerezis = 0;
 406:	c0 e0       	ldi	r28, 0x00	; 0
		if (flag.keyScan) 
		{
			flag.keyScan = 0;	
			if (ENC_Scan(&setTemp, MAX_TEMP)) 
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 408:	88 eb       	ldi	r24, 0xB8	; 184
 40a:	e8 2e       	mov	r14, r24
 40c:	8b e0       	ldi	r24, 0x0B	; 11
 40e:	f8 2e       	mov	r15, r24
				flag.tempEepromWrite = TRUE;
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 410:	90 ed       	ldi	r25, 0xD0	; 208
 412:	c9 2e       	mov	r12, r25
 414:	97 e0       	ldi	r25, 0x07	; 7
 416:	d9 2e       	mov	r13, r25
			}
		}
		if (flag.adcRead) 
		{
			int16_t tempData;
			tempData = (setTemp * 24) / 17;
 418:	d8 e1       	ldi	r29, 0x18	; 24
 41a:	21 e1       	ldi	r18, 0x11	; 17
 41c:	a2 2e       	mov	r10, r18
 41e:	b1 2c       	mov	r11, r1
			}
		}
		if (flag.readTemp) 
		{
			flag.readTemp = FALSE;
			currTemperature = (adcResult * 17) / 24;
 420:	31 e1       	ldi	r19, 0x11	; 17
 422:	73 2e       	mov	r7, r19
 424:	48 e1       	ldi	r20, 0x18	; 24
 426:	84 2e       	mov	r8, r20
 428:	91 2c       	mov	r9, r1
	sei();
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
	flag.setTempVisible = TRUE;
	while(1)
	{
		if (flag.keyScan) 
 42a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 42e:	80 ff       	sbrs	r24, 0
 430:	1e c0       	rjmp	.+60     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		{
			flag.keyScan = 0;	
 432:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 436:	8e 7f       	andi	r24, 0xFE	; 254
 438:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			if (ENC_Scan(&setTemp, MAX_TEMP)) 
 43c:	6c e2       	ldi	r22, 0x2C	; 44
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	82 e1       	ldi	r24, 0x12	; 18
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	43 df       	rcall	.-378    	; 0x2cc <ENC_Scan>
 446:	88 23       	and	r24, r24
 448:	91 f0       	breq	.+36     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 44a:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <countTimeWriteEeprom+0x1>
 44e:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <countTimeWriteEeprom>
				flag.tempEepromWrite = TRUE;
 452:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 456:	80 62       	ori	r24, 0x20	; 32
 458:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 45c:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <__data_end+0x1>
 460:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <__data_end>
				flag.setTempVisible = TRUE;
 464:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			}
		}
		if (flag.adcRead) 
 46e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 472:	82 ff       	sbrs	r24, 2
 474:	23 c0       	rjmp	.+70     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		{
			int16_t tempData;
			tempData = (setTemp * 24) / 17;
 476:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <setTemp>
 47a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <setTemp+0x1>
 47e:	d2 9f       	mul	r29, r18
 480:	c0 01       	movw	r24, r0
 482:	d3 9f       	mul	r29, r19
 484:	90 0d       	add	r25, r0
 486:	11 24       	eor	r1, r1
 488:	b5 01       	movw	r22, r10
 48a:	27 d1       	rcall	.+590    	; 0x6da <__divmodhi4>
 48c:	8b 01       	movw	r16, r22
			flag.adcRead = FALSE;
 48e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 492:	8b 7f       	andi	r24, 0xFB	; 251
 494:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			adcResult = ADCRead(0);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	b3 de       	rcall	.-666    	; 0x202 <ADCRead>
 49c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <adcResult+0x1>
 4a0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <adcResult>
			if (adcResult <= (tempData - histerezis))
 4a4:	0c 1b       	sub	r16, r28
 4a6:	11 09       	sbc	r17, r1
 4a8:	08 17       	cp	r16, r24
 4aa:	19 07       	cpc	r17, r25
 4ac:	24 f0       	brlt	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
			{
				LED_ON();
 4ae:	5b 98       	cbi	0x0b, 3	; 11
				REL1_ON();
 4b0:	5c 9a       	sbi	0x0b, 4	; 11
				histerezis = 0;
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			}
			else 
			{
				LED_OFF();
 4b6:	5b 9a       	sbi	0x0b, 3	; 11
				REL1_OFF();
 4b8:	5c 98       	cbi	0x0b, 4	; 11
				histerezis = 7;
 4ba:	c7 e0       	ldi	r28, 0x07	; 7
			}
		}
		if (flag.readTemp) 
 4bc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 4c0:	80 ff       	sbrs	r24, 0
 4c2:	14 c0       	rjmp	.+40     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		{
			flag.readTemp = FALSE;
 4c4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flag+0x1>
			currTemperature = (adcResult * 17) / 24;
 4ce:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <adcResult>
 4d2:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <adcResult+0x1>
 4d6:	72 9e       	mul	r7, r18
 4d8:	c0 01       	movw	r24, r0
 4da:	73 9e       	mul	r7, r19
 4dc:	90 0d       	add	r25, r0
 4de:	11 24       	eor	r1, r1
 4e0:	b4 01       	movw	r22, r8
 4e2:	fb d0       	rcall	.+502    	; 0x6da <__divmodhi4>
 4e4:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <currTemperature+0x1>
 4e8:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <currTemperature>
		}
		if (flag.setTempVisible) 
 4ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 4f0:	86 ff       	sbrs	r24, 6
 4f2:	0a c0       	rjmp	.+20     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		{
			ResultBcd(setTemp, setTemp, 1000, dataOut_);
 4f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setTemp>
 4f8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setTemp+0x1>
 4fc:	25 e0       	ldi	r18, 0x05	; 5
 4fe:	31 e0       	ldi	r19, 0x01	; 1
 500:	48 ee       	ldi	r20, 0xE8	; 232
 502:	53 e0       	ldi	r21, 0x03	; 3
 504:	bc 01       	movw	r22, r24
 506:	0c c0       	rjmp	.+24     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		else
		{
			ResultBcd(currTemperature, adcResult, 1000, dataOut_);
 508:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <adcResult>
 50c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <adcResult+0x1>
 510:	25 e0       	ldi	r18, 0x05	; 5
 512:	31 e0       	ldi	r19, 0x01	; 1
 514:	48 ee       	ldi	r20, 0xE8	; 232
 516:	53 e0       	ldi	r21, 0x03	; 3
 518:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <currTemperature>
 51c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <currTemperature+0x1>
 520:	91 de       	rcall	.-734    	; 0x244 <ResultBcd>
		}
		if (flag.lcdUpdate) 
 522:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 526:	81 ff       	sbrs	r24, 1
 528:	08 c0       	rjmp	.+16     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		{
			LcdUpdate(dataOut_);	
 52a:	85 e0       	ldi	r24, 0x05	; 5
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	2f df       	rcall	.-418    	; 0x38e <LcdUpdate>
			flag.lcdUpdate = 0;
 530:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 534:	8d 7f       	andi	r24, 0xFD	; 253
 536:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
		}
		if(flag.eepromWrite)
 53a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 53e:	83 ff       	sbrs	r24, 3
 540:	74 cf       	rjmp	.-280    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			SaveEepromMode();
 542:	9f de       	rcall	.-706    	; 0x282 <SaveEepromMode>
 544:	72 cf       	rjmp	.-284    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000546 <UsartInit>:
volatile uint8_t rxHeadBuffer;
volatile uint8_t rxCountBuffer;

void UsartInit(void){
	uint16_t i = USART_BAUDRATE_DIV;
	UBRR0L = i;
 546:	89 e1       	ldi	r24, 0x19	; 25
 548:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H = i >> 8;
 54c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//8-bit ,1-stop bit,no parity
 550:	e2 ec       	ldi	r30, 0xC2	; 194
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	86 60       	ori	r24, 0x06	; 6
 558:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) |
 55a:	e1 ec       	ldi	r30, 0xC1	; 193
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	88 6d       	ori	r24, 0xD8	; 216
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <UsartPutChar>:
			(1 << RXCIE0);//enable tx ,enable interrupt tx
}

void UsartPutChar(uint8_t ch){
	if(bit_is_set(UCSR0A,UDRE0) && txCountBuffer == 0)
 566:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 56a:	95 ff       	sbrs	r25, 5
 56c:	07 c0       	rjmp	.+14     	; 0x57c <UsartPutChar+0x16>
 56e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 572:	91 11       	cpse	r25, r1
 574:	03 c0       	rjmp	.+6      	; 0x57c <UsartPutChar+0x16>
		UDR0 = ch;
 576:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 57a:	08 95       	ret
	else if(txCountBuffer < USART_TX_BUFFER_SIZE){
 57c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 580:	94 31       	cpi	r25, 0x14	; 20
 582:	b0 f4       	brcc	.+44     	; 0x5b0 <UsartPutChar+0x4a>
		txCountBuffer ++;
 584:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 588:	9f 5f       	subi	r25, 0xFF	; 255
 58a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <txCountBuffer>
		usartTxBuffer[txHeadBuffer] = ch;
 58e:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <txHeadBuffer>
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	e4 5d       	subi	r30, 0xD4	; 212
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	80 83       	st	Z, r24
		txHeadBuffer ++;
 59a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <txHeadBuffer>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <txHeadBuffer>
		if(txHeadBuffer == USART_TX_BUFFER_SIZE)
 5a4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <txHeadBuffer>
 5a8:	84 31       	cpi	r24, 0x14	; 20
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <UsartPutChar+0x4a>
			txHeadBuffer = 0;
 5ac:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <txHeadBuffer>
 5b0:	08 95       	ret

000005b2 <UsartPutString>:
	}
}

void UsartPutString(uint8_t *string){
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
	while(*string){
 5b8:	89 91       	ld	r24, Y+
 5ba:	88 23       	and	r24, r24
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <UsartPutString+0x10>
		UsartPutChar(*string);
 5be:	d3 df       	rcall	.-90     	; 0x566 <UsartPutChar>
 5c0:	fb cf       	rjmp	.-10     	; 0x5b8 <UsartPutString+0x6>
		string++;
	}
}
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <UsartGetChar>:

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
	if(rxCountBuffer){
 5c8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 5cc:	88 23       	and	r24, r24
 5ce:	b9 f0       	breq	.+46     	; 0x5fe <UsartGetChar+0x36>
		ch = usartRxBuffer[rxTailBuffer];
 5d0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <rxTailBuffer>
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	ea 5e       	subi	r30, 0xEA	; 234
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 81       	ld	r24, Z
		rxCountBuffer --;
 5dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rxCountBuffer>
 5e0:	91 50       	subi	r25, 0x01	; 1
 5e2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rxCountBuffer>
		rxTailBuffer ++;
 5e6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rxTailBuffer>
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rxTailBuffer>
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
 5f0:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rxTailBuffer>
 5f4:	94 31       	cpi	r25, 0x14	; 20
 5f6:	21 f4       	brne	.+8      	; 0x600 <UsartGetChar+0x38>
			rxTailBuffer = 0;
 5f8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rxTailBuffer>
 5fc:	08 95       	ret
		string++;
	}
}

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
		rxTailBuffer ++;
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
			rxTailBuffer = 0;
	}
	return ch;
}
 600:	08 95       	ret

00000602 <__vector_20>:

ISR(USART_TX_vect)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	8f 93       	push	r24
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
	if(txCountBuffer){
 612:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <txCountBuffer>
 616:	88 23       	and	r24, r24
 618:	c1 f0       	breq	.+48     	; 0x64a <__vector_20+0x48>
		UDR0	= usartTxBuffer[txTailBuffer];
 61a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <txTailBuffer>
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	e4 5d       	subi	r30, 0xD4	; 212
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	80 81       	ld	r24, Z
 626:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
		txCountBuffer --;
 62a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <txCountBuffer>
 62e:	81 50       	subi	r24, 0x01	; 1
 630:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <txCountBuffer>
		txTailBuffer ++;
 634:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txTailBuffer>
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txTailBuffer>
		if(txTailBuffer == USART_TX_BUFFER_SIZE)
 63e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txTailBuffer>
 642:	84 31       	cpi	r24, 0x14	; 20
 644:	11 f4       	brne	.+4      	; 0x64a <__vector_20+0x48>
			txTailBuffer = 0;
 646:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <txTailBuffer>
	}
}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	8f 91       	pop	r24
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__vector_18>:

ISR(USART_RX_vect){
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	8f 93       	push	r24
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
	if(rxCountBuffer < USART_RX_BUFFER_SIZE){
 66a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 66e:	84 31       	cpi	r24, 0x14	; 20
 670:	c0 f4       	brcc	.+48     	; 0x6a2 <__vector_18+0x48>
		usartRxBuffer[rxHeadBuffer] = UDR0;
 672:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <rxHeadBuffer>
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 67c:	ea 5e       	subi	r30, 0xEA	; 234
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	80 83       	st	Z, r24
		rxHeadBuffer ++;
 682:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rxHeadBuffer>
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rxHeadBuffer>
		rxCountBuffer ++;
 68c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <rxCountBuffer>
		if(rxHeadBuffer ==  USART_TX_BUFFER_SIZE)
 696:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rxHeadBuffer>
 69a:	84 31       	cpi	r24, 0x14	; 20
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__vector_18+0x48>
			rxHeadBuffer = 0;
 69e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rxHeadBuffer>
	}
}
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	8f 91       	pop	r24
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__udivmodhi4>:
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	51 e1       	ldi	r21, 0x11	; 17
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__udivmodhi4_ep>

000006ba <__udivmodhi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	a6 17       	cp	r26, r22
 6c0:	b7 07       	cpc	r27, r23
 6c2:	10 f0       	brcs	.+4      	; 0x6c8 <__udivmodhi4_ep>
 6c4:	a6 1b       	sub	r26, r22
 6c6:	b7 0b       	sbc	r27, r23

000006c8 <__udivmodhi4_ep>:
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	5a 95       	dec	r21
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__udivmodhi4_loop>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	08 95       	ret

000006da <__divmodhi4>:
 6da:	97 fb       	bst	r25, 7
 6dc:	07 2e       	mov	r0, r23
 6de:	16 f4       	brtc	.+4      	; 0x6e4 <__divmodhi4+0xa>
 6e0:	00 94       	com	r0
 6e2:	06 d0       	rcall	.+12     	; 0x6f0 <__divmodhi4_neg1>
 6e4:	77 fd       	sbrc	r23, 7
 6e6:	08 d0       	rcall	.+16     	; 0x6f8 <__divmodhi4_neg2>
 6e8:	e4 df       	rcall	.-56     	; 0x6b2 <__udivmodhi4>
 6ea:	07 fc       	sbrc	r0, 7
 6ec:	05 d0       	rcall	.+10     	; 0x6f8 <__divmodhi4_neg2>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__divmodhi4_exit>

000006f0 <__divmodhi4_neg1>:
 6f0:	90 95       	com	r25
 6f2:	81 95       	neg	r24
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__divmodhi4_neg2>:
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255

000006fe <__divmodhi4_exit>:
 6fe:	08 95       	ret

00000700 <eeprom_read_word>:
 700:	a8 e1       	ldi	r26, 0x18	; 24
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	42 e0       	ldi	r20, 0x02	; 2
 706:	05 c0       	rjmp	.+10     	; 0x712 <eeprom_read_blraw>

00000708 <eeprom_write_word>:
 708:	11 d0       	rcall	.+34     	; 0x72c <eeprom_write_byte>
 70a:	27 2f       	mov	r18, r23
 70c:	10 c0       	rjmp	.+32     	; 0x72e <eeprom_write_r18>

0000070e <eeprom_read_block>:
 70e:	dc 01       	movw	r26, r24
 710:	86 2f       	mov	r24, r22

00000712 <eeprom_read_blraw>:
 712:	e8 2f       	mov	r30, r24
 714:	f9 99       	sbic	0x1f, 1	; 31
 716:	fe cf       	rjmp	.-4      	; 0x714 <eeprom_read_blraw+0x2>
 718:	12 bc       	out	0x22, r1	; 34
 71a:	05 c0       	rjmp	.+10     	; 0x726 <eeprom_read_blraw+0x14>
 71c:	e1 bd       	out	0x21, r30	; 33
 71e:	f8 9a       	sbi	0x1f, 0	; 31
 720:	e3 95       	inc	r30
 722:	00 b4       	in	r0, 0x20	; 32
 724:	0d 92       	st	X+, r0
 726:	41 50       	subi	r20, 0x01	; 1
 728:	c8 f7       	brcc	.-14     	; 0x71c <eeprom_read_blraw+0xa>
 72a:	08 95       	ret

0000072c <eeprom_write_byte>:
 72c:	26 2f       	mov	r18, r22

0000072e <eeprom_write_r18>:
 72e:	f9 99       	sbic	0x1f, 1	; 31
 730:	fe cf       	rjmp	.-4      	; 0x72e <eeprom_write_r18>
 732:	1f ba       	out	0x1f, r1	; 31
 734:	12 bc       	out	0x22, r1	; 34
 736:	81 bd       	out	0x21, r24	; 33
 738:	20 bd       	out	0x20, r18	; 32
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	fa 9a       	sbi	0x1f, 2	; 31
 740:	f9 9a       	sbi	0x1f, 1	; 31
 742:	0f be       	out	0x3f, r0	; 63
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	08 95       	ret

00000748 <_exit>:
 748:	f8 94       	cli

0000074a <__stop_program>:
 74a:	ff cf       	rjmp	.-2      	; 0x74a <__stop_program>
