
tempcontroll.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000770  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000770  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080010a  0080010a  0000082e  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000012e0  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000baf  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000076b  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e8  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006b7  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000556  00000000  00000000  0000383b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	54 c0       	rjmp	.+168    	; 0xca <__vector_16>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	2c c3       	rjmp	.+1624   	; 0x67e <__vector_18>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	fe c2       	rjmp	.+1532   	; 0x626 <__vector_20>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>
  34:	9e c1       	rjmp	.+828    	; 0x372 <ENC_Scan+0x46>
  36:	96 c1       	rjmp	.+812    	; 0x364 <ENC_Scan+0x38>
  38:	ce c1       	rjmp	.+924    	; 0x3d6 <ENC_Scan+0xaa>
  3a:	94 c1       	rjmp	.+808    	; 0x364 <ENC_Scan+0x38>
  3c:	cc c1       	rjmp	.+920    	; 0x3d6 <ENC_Scan+0xaa>
  3e:	cb c1       	rjmp	.+918    	; 0x3d6 <ENC_Scan+0xaa>
  40:	98 c1       	rjmp	.+816    	; 0x372 <ENC_Scan+0x46>
  42:	97 c1       	rjmp	.+814    	; 0x372 <ENC_Scan+0x46>
  44:	c8 c1       	rjmp	.+912    	; 0x3d6 <ENC_Scan+0xaa>
  46:	c7 c1       	rjmp	.+910    	; 0x3d6 <ENC_Scan+0xaa>
  48:	8d c1       	rjmp	.+794    	; 0x364 <ENC_Scan+0x38>
  4a:	c5 c1       	rjmp	.+906    	; 0x3d6 <ENC_Scan+0xaa>
  4c:	8b c1       	rjmp	.+790    	; 0x364 <ENC_Scan+0x38>
  4e:	91 c1       	rjmp	.+802    	; 0x372 <ENC_Scan+0x46>

00000050 <__trampolines_end>:
  50:	c0 f9       	bld	r28, 0
  52:	a4 b0       	in	r10, 0x04	; 4
  54:	99 92       	st	Y+, r9
  56:	82 f8       	bld	r8, 2
  58:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__EEPROM_REGION_LENGTH__+0x7f00bf>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d2 e0       	ldi	r29, 0x02	; 2
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e7       	ldi	r30, 0x70	; 112
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 30       	cpi	r26, 0x0A	; 10
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	aa e0       	ldi	r26, 0x0A	; 10
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a8 34       	cpi	r26, 0x48	; 72
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	a5 d1       	rcall	.+842    	; 0x3da <main>
  90:	6d c3       	rjmp	.+1754   	; 0x76c <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <Init>:
volatile uint16_t countSetTempVisible = 0;


void Init(void)
{
	LED_DDR |= (1 << LED_OUT);
  94:	53 9a       	sbi	0x0a, 3	; 10
	LED_OFF();
  96:	5b 9a       	sbi	0x0b, 3	; 11
	REL_DDR |= REL_MASK;//Pin to output
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	80 63       	ori	r24, 0x30	; 48
  9c:	8a b9       	out	0x0a, r24	; 10
	REL_PORT &= ~REL_MASK;//Relays off
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 7c       	andi	r24, 0xCF	; 207
  a2:	8b b9       	out	0x0b, r24	; 11
	setTemp = eeprom_read_word(&setTempEeprom);//read from eeprom temp value
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	3d d3       	rcall	.+1658   	; 0x724 <eeprom_read_word>
  aa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setTemp+0x1>
  ae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setTemp>
  b2:	08 95       	ret

000000b4 <Timer0Init>:
void Timer0Init(void)
{
#if(F_CPU != 8000000)
#error ***You must set TCCR0
#endif
	TCCR0B|=(1<<CS02)|(1<<CS00);//T0_PRESC = 1024
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
	TCNT0 = T0_INIT;
  ba:	88 ef       	ldi	r24, 0xF8	; 248
  bc:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);//enable interrupt overllow timer0
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	TCNT0 = T0_INIT;
  d8:	88 ef       	ldi	r24, 0xF8	; 248
  da:	86 bd       	out	0x26, r24	; 38
	countTimeKeyScan --;
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
	countTimeLcdUpdate --;
  e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
	countTimeAdcRead --;
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
	countTimeTempRead --;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(!countTimeKeyScan)
 10c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
 110:	81 11       	cpse	r24, r1
 112:	08 c0       	rjmp	.+16     	; 0x124 <__vector_16+0x5a>
	{
		countTimeKeyScan = PERIOD_KEY_SCAN;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
		flag.keyScan = TRUE;
 11a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeLcdUpdate)
 124:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
 128:	81 11       	cpse	r24, r1
 12a:	08 c0       	rjmp	.+16     	; 0x13c <__vector_16+0x72>
	{
		countTimeLcdUpdate = PERIOD_LCD_UPDATE;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
		flag.lcdUpdate = TRUE;
 132:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeAdcRead)
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
 140:	81 11       	cpse	r24, r1
 142:	08 c0       	rjmp	.+16     	; 0x154 <__vector_16+0x8a>
	{
		countTimeAdcRead = PERIOD_ADC_READ;
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
		flag.adcRead = TRUE;
 14a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(!countTimeTempRead)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	59 f4       	brne	.+22     	; 0x176 <__vector_16+0xac>
	{
		countTimeTempRead = PERIOD_TEMP_UPDATE;
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		flag.readTemp = TRUE;
 16c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flag+0x1>
	}
	if(countTimeWriteEeprom)
 176:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 17a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 17e:	89 2b       	or	r24, r25
 180:	a1 f0       	breq	.+40     	; 0x1aa <__vector_16+0xe0>
	{
		countTimeWriteEeprom --;
 182:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 186:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <countTimeWriteEeprom+0x1>
 190:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <countTimeWriteEeprom>
		if(countTimeWriteEeprom == 0)
 194:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countTimeWriteEeprom>
 198:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countTimeWriteEeprom+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	29 f4       	brne	.+10     	; 0x1aa <__vector_16+0xe0>
			flag.eepromWrite = TRUE;
 1a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	if(countSetTempVisible)
 1aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	a1 f0       	breq	.+40     	; 0x1de <__vector_16+0x114>
	{
		countSetTempVisible --;
 1b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if(countSetTempVisible == 0)
 1c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1cc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	29 f4       	brne	.+10     	; 0x1de <__vector_16+0x114>
			flag.setTempVisible = FALSE;
 1d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
}
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <ADCInit>:
void ADCInit(void)
{
#if(F_CPU != 8000000)
#error ***You must set ADCSRA
#endif
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADEN); //PRESC F_CPU/64
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	86 68       	ori	r24, 0x86	; 134
 1f4:	80 83       	st	Z, r24
	ADMUX &= ~ADC_VREF_TYPE; //AREF, Internal Vref turned off
 1f6:	ec e7       	ldi	r30, 0x7C	; 124
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <ADCRead>:
}

int16_t ADCRead(uint8_t chanel)
{
	/* ADMUX = ADC_VREF_TYPE | chanel; */
	ADMUX &= ~ADC_VREF_TYPE;
 202:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 206:	9f 73       	andi	r25, 0x3F	; 63
 208:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADMUX |= chanel;
 20c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 210:	89 2b       	or	r24, r25
 212:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	8a e1       	ldi	r24, 0x1A	; 26
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <ADCRead+0x16>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <ADCRead+0x1c>
	_delay_us(10);//delay needed for stabilization of the ACD input voltag
	ADCSRA |= (1 << ADSC);//start convertion
 21e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	while ((ADCSRA & (1 << ADIF)) == 0);//wait for complete conversion
 228:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 22c:	84 ff       	sbrs	r24, 4
 22e:	fc cf       	rjmp	.-8      	; 0x228 <ADCRead+0x26>
	ADCSRA |=(1 << ADIF);
 230:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 234:	80 61       	ori	r24, 0x10	; 16
 236:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	/* flag.adcRead = FALSE; */
	return ADCW;
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
 242:	08 95       	ret

00000244 <ResultBcd>:

void ResultBcd(uint16_t data, int16_t contrlValue, uint16_t upLimit, uint8_t dataOut[4])
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
 24a:	f9 01       	movw	r30, r18
	uint8_t i;
	if(contrlValue > upLimit)
 24c:	46 17       	cp	r20, r22
 24e:	57 07       	cpc	r21, r23
 250:	30 f4       	brcc	.+12     	; 0x25e <ResultBcd+0x1a>
	{//якщо обрив датчика ,або коротке замикання
		for (i = 0; i <= 3; i++) 
		{
			dataOut[i] = 10;//виводимо на дисплей рисочки
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	80 83       	st	Z, r24
 256:	81 83       	std	Z+1, r24	; 0x01
 258:	82 83       	std	Z+2, r24	; 0x02
 25a:	83 83       	std	Z+3, r24	; 0x03
 25c:	0f c0       	rjmp	.+30     	; 0x27c <ResultBcd+0x38>
		}
		return ;
	}
	dataOut[1] = data/100;
 25e:	64 e6       	ldi	r22, 0x64	; 100
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	39 d2       	rcall	.+1138   	; 0x6d6 <__udivmodhi4>
 264:	61 83       	std	Z+1, r22	; 0x01
	dataOut[2] = (data / 10) % 10;
 266:	2a e0       	ldi	r18, 0x0A	; 10
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	ce 01       	movw	r24, r28
 26c:	b9 01       	movw	r22, r18
 26e:	33 d2       	rcall	.+1126   	; 0x6d6 <__udivmodhi4>
 270:	48 2f       	mov	r20, r24
 272:	cb 01       	movw	r24, r22
 274:	b9 01       	movw	r22, r18
 276:	2f d2       	rcall	.+1118   	; 0x6d6 <__udivmodhi4>
 278:	82 83       	std	Z+2, r24	; 0x02
	dataOut[3] = data % 10;
 27a:	43 83       	std	Z+3, r20	; 0x03
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <SaveEepromMode>:

void SaveEepromMode(void)
{
	if(flag.tempEepromWrite)
 282:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 286:	85 ff       	sbrs	r24, 5
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <SaveEepromMode+0x20>
	{
		eeprom_write_word(&setTempEeprom,setTemp);
 28a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <setTemp>
 28e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <setTemp+0x1>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	4a d2       	rcall	.+1172   	; 0x72c <eeprom_write_word>
		flag.tempEepromWrite = FALSE;
 298:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
	}
	flag.eepromWrite = FALSE;
 2a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 2a6:	87 7f       	andi	r24, 0xF7	; 247
 2a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
 2ac:	08 95       	ret

000002ae <LcdInit>:

#include "lcd.h"

void LcdInit(void)
{
	LCD_DDR = 0xFF;			//port out
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	94 b9       	out	0x04, r25	; 4
	DIG_DDR |= DIG_MASK;	//port out
 2b2:	87 b1       	in	r24, 0x07	; 7
 2b4:	88 63       	ori	r24, 0x38	; 56
 2b6:	87 b9       	out	0x07, r24	; 7
	DIG_PORT |= DIG_MASK;	//hight level, off all digits
 2b8:	88 b1       	in	r24, 0x08	; 8
 2ba:	88 63       	ori	r24, 0x38	; 56
 2bc:	88 b9       	out	0x08, r24	; 8
	LCD_PORT = 0xFF; //Off all segments
 2be:	95 b9       	out	0x05, r25	; 5
 2c0:	08 95       	ret

000002c2 <LcdUpdate>:
}

void LcdUpdate(uint8_t* data)
{
	static uint8_t count = 0;
	DIG_PORT |= DIG_MASK; //Off all digits
 2c2:	28 b1       	in	r18, 0x08	; 8
 2c4:	28 63       	ori	r18, 0x38	; 56
 2c6:	28 b9       	out	0x08, r18	; 8
	if(count == 0)
 2c8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <count.1771>
 2cc:	21 11       	cpse	r18, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <LcdUpdate+0x12>
	{
		DIG_PORT &= ~(1 << DIG_3);
 2d0:	45 98       	cbi	0x08, 5	; 8
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
        /* View mode heating */
	}
	else if(count == 1)
 2d4:	21 30       	cpi	r18, 0x01	; 1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <LcdUpdate+0x1a>
	{
		DIG_PORT &= ~(1 << DIG_2);
 2d8:	44 98       	cbi	0x08, 4	; 8
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
	}
	else if(count == 2)
 2dc:	22 30       	cpi	r18, 0x02	; 2
 2de:	61 f4       	brne	.+24     	; 0x2f8 <LcdUpdate+0x36>
	{
		DIG_PORT &= ~(1 << DIG_1);
 2e0:	43 98       	cbi	0x08, 3	; 8
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
 2e2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <count.1771>
 2e6:	fc 01       	movw	r30, r24
 2e8:	e2 0f       	add	r30, r18
 2ea:	f1 1d       	adc	r31, r1
 2ec:	e1 81       	ldd	r30, Z+1	; 0x01
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e0 5b       	subi	r30, 0xB0	; 176
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	e4 91       	lpm	r30, Z
 2f6:	e5 b9       	out	0x05, r30	; 5
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 2f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count.1771>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
	if(count > 2)
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	18 f4       	brcc	.+6      	; 0x308 <__stack+0x9>
		DIG_PORT &= ~(1 << DIG_1);
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 302:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count.1771>
 306:	08 95       	ret
	if(count > 2)
		count = 0;
 308:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count.1771>
 30c:	08 95       	ret

0000030e <ENC_Init>:
static uint8_t encState = 0;
static volatile int16_t encValue = 0;

void ENC_Init(int16_t startValue)
{
	ENC_DDR &= ~ENC_MASK;// In
 30e:	2a b1       	in	r18, 0x0a	; 10
 310:	2f 73       	andi	r18, 0x3F	; 63
 312:	2a b9       	out	0x0a, r18	; 10
	ENC_PORT |= ENC_MASK;//Pull-up
 314:	2b b1       	in	r18, 0x0b	; 11
 316:	20 6c       	ori	r18, 0xC0	; 192
 318:	2b b9       	out	0x0b, r18	; 11
	encValue = startValue << 2;
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <encValue+0x1>
 326:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <encValue>
 32a:	08 95       	ret

0000032c <ENC_Scan>:
}

uint8_t  ENC_Scan(int16_t* value, uint16_t maxValue)
{
 32c:	dc 01       	movw	r26, r24
 32e:	9b 01       	movw	r18, r22
	uint8_t newState = ENC_PIN >> 6;
 330:	99 b1       	in	r25, 0x09	; 9
 332:	92 95       	swap	r25
 334:	96 95       	lsr	r25
 336:	96 95       	lsr	r25
 338:	93 70       	andi	r25, 0x03	; 3
	uint8_t fullState = newState | (encState << 2);
	switch (fullState) 
 33a:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <encState>
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	48 9f       	mul	r20, r24
 342:	a0 01       	movw	r20, r0
 344:	11 24       	eor	r1, r1
 346:	e9 2f       	mov	r30, r25
 348:	e4 2b       	or	r30, r20
 34a:	4e 2f       	mov	r20, r30
 34c:	ee 0f       	add	r30, r30
 34e:	55 0b       	sbc	r21, r21
 350:	66 0b       	sbc	r22, r22
 352:	77 0b       	sbc	r23, r23
 354:	fa 01       	movw	r30, r20
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	ee 30       	cpi	r30, 0x0E	; 14
 35a:	f1 05       	cpc	r31, r1
 35c:	e0 f5       	brcc	.+120    	; 0x3d6 <ENC_Scan+0xaa>
 35e:	e6 5e       	subi	r30, 0xE6	; 230
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	09 94       	ijmp
	{
		case 0x2: case 0x4: case 0xB: case 0xD:
			encValue--;
 364:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <encValue>
 368:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <encValue+0x1>
 36c:	41 50       	subi	r20, 0x01	; 1
 36e:	51 09       	sbc	r21, r1
 370:	06 c0       	rjmp	.+12     	; 0x37e <ENC_Scan+0x52>
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
 372:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <encValue>
 376:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <encValue+0x1>
 37a:	4f 5f       	subi	r20, 0xFF	; 255
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <encValue+0x1>
 382:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <encValue>
			break;
		default:
			return FALSE;
			break;
	}
	encState = newState;
 386:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <encState>
	if (encValue > (maxValue << 2)) 
 38a:	b9 01       	movw	r22, r18
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <encValue>
 398:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <encValue+0x1>
 39c:	68 17       	cp	r22, r24
 39e:	79 07       	cpc	r23, r25
 3a0:	20 f4       	brcc	.+8      	; 0x3aa <ENC_Scan+0x7e>
	{
		encValue = (maxValue << 2);
 3a2:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <encValue+0x1>
 3a6:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <encValue>
	}
	if (encValue < 0) 
 3aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <encValue>
 3ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <encValue+0x1>
 3b2:	97 ff       	sbrs	r25, 7
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <ENC_Scan+0x92>
	{
		encValue = 0;
 3b6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <encValue+0x1>
 3ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encValue>
	}
	*value = encValue >> 2;
 3be:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <encValue>
 3c2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <encValue+0x1>
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	8d 93       	st	X+, r24
 3d0:	9c 93       	st	X, r25
	return TRUE;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	08 95       	ret
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
			break;
		default:
			return FALSE;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
	{
		encValue = 0;
	}
	*value = encValue >> 2;
	return TRUE;
}
 3d8:	08 95       	ret

000003da <main>:
uint16_t currTemperature;

int main(void)
{
	uint8_t histerezis = 0;
	UsartInit();
 3da:	c7 d0       	rcall	.+398    	; 0x56a <UsartInit>
	LcdInit();
 3dc:	68 df       	rcall	.-304    	; 0x2ae <LcdInit>
	Timer0Init();
 3de:	6a de       	rcall	.-812    	; 0xb4 <Timer0Init>
	ADCInit();
 3e0:	05 df       	rcall	.-502    	; 0x1ec <ADCInit>
	Init();
 3e2:	58 de       	rcall	.-848    	; 0x94 <Init>
	ENC_Init(setTemp);
 3e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setTemp>
 3e8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setTemp+0x1>
 3ec:	90 df       	rcall	.-224    	; 0x30e <ENC_Init>
	sei();
 3ee:	78 94       	sei
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3f0:	80 ed       	ldi	r24, 0xD0	; 208
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 3f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	flag.setTempVisible = TRUE;
 3fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
int16_t adcResult;
uint16_t currTemperature;

int main(void)
{
	uint8_t histerezis = 0;
 406:	c0 e0       	ldi	r28, 0x00	; 0
		if (flag.keyScan) 
		{
			flag.keyScan = 0;	
			if (ENC_Scan(&setTemp, MAX_TEMP)) 
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 408:	88 eb       	ldi	r24, 0xB8	; 184
 40a:	e8 2e       	mov	r14, r24
 40c:	8b e0       	ldi	r24, 0x0B	; 11
 40e:	f8 2e       	mov	r15, r24
				flag.tempEepromWrite = TRUE;
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 410:	90 ed       	ldi	r25, 0xD0	; 208
 412:	c9 2e       	mov	r12, r25
 414:	97 e0       	ldi	r25, 0x07	; 7
 416:	d9 2e       	mov	r13, r25
			}
		}
		if (flag.adcRead) 
		{
			int16_t tempData;
			tempData = (setTemp * 24) / 17;
 418:	28 e1       	ldi	r18, 0x18	; 24
 41a:	72 2e       	mov	r7, r18
 41c:	31 e1       	ldi	r19, 0x11	; 17
 41e:	a3 2e       	mov	r10, r19
 420:	b1 2c       	mov	r11, r1
			flag.adcRead = FALSE;
			adcResult = ADCRead(0);
			uint16_t currTemp = (adcResult * 17) / 24;
 422:	d1 e1       	ldi	r29, 0x11	; 17
 424:	08 e1       	ldi	r16, 0x18	; 24
 426:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
	flag.setTempVisible = TRUE;
	while(1)
	{
		if (flag.keyScan) 
 428:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 42c:	80 ff       	sbrs	r24, 0
 42e:	1e c0       	rjmp	.+60     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			flag.keyScan = 0;	
 430:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			if (ENC_Scan(&setTemp, MAX_TEMP)) 
 43a:	6c e2       	ldi	r22, 0x2C	; 44
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	82 e1       	ldi	r24, 0x12	; 18
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	74 df       	rcall	.-280    	; 0x32c <ENC_Scan>
 444:	88 23       	and	r24, r24
 446:	91 f0       	breq	.+36     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 448:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <countTimeWriteEeprom+0x1>
 44c:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <countTimeWriteEeprom>
				flag.tempEepromWrite = TRUE;
 450:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 454:	80 62       	ori	r24, 0x20	; 32
 456:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 45a:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <__data_end+0x1>
 45e:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <__data_end>
				flag.setTempVisible = TRUE;
 462:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 466:	80 64       	ori	r24, 0x40	; 64
 468:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			}
		}
		if (flag.adcRead) 
 46c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 470:	82 ff       	sbrs	r24, 2
 472:	36 c0       	rjmp	.+108    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		{
			int16_t tempData;
			tempData = (setTemp * 24) / 17;
 474:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <setTemp>
 478:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <setTemp+0x1>
 47c:	72 9e       	mul	r7, r18
 47e:	c0 01       	movw	r24, r0
 480:	73 9e       	mul	r7, r19
 482:	90 0d       	add	r25, r0
 484:	11 24       	eor	r1, r1
 486:	b5 01       	movw	r22, r10
 488:	3a d1       	rcall	.+628    	; 0x6fe <__divmodhi4>
 48a:	4b 01       	movw	r8, r22
			flag.adcRead = FALSE;
 48c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
			adcResult = ADCRead(0);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	b4 de       	rcall	.-664    	; 0x202 <ADCRead>
 49a:	9c 01       	movw	r18, r24
 49c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <adcResult+0x1>
 4a0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <adcResult>
			uint16_t currTemp = (adcResult * 17) / 24;
 4a4:	d2 9f       	mul	r29, r18
 4a6:	c0 01       	movw	r24, r0
 4a8:	d3 9f       	mul	r29, r19
 4aa:	90 0d       	add	r25, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	b8 01       	movw	r22, r16
 4b0:	26 d1       	rcall	.+588    	; 0x6fe <__divmodhi4>
			if (adcResult <= (tempData - histerezis))
 4b2:	8c 1a       	sub	r8, r28
 4b4:	91 08       	sbc	r9, r1
 4b6:	82 16       	cp	r8, r18
 4b8:	93 06       	cpc	r9, r19
 4ba:	24 f0       	brlt	.+8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			{
				LED_ON();
 4bc:	5b 98       	cbi	0x0b, 3	; 11
				REL1_ON();
 4be:	5c 9a       	sbi	0x0b, 4	; 11
				histerezis = 0;
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			}
			else 
			{
				LED_OFF();
 4c4:	5b 9a       	sbi	0x0b, 3	; 11
				REL1_OFF();
 4c6:	5c 98       	cbi	0x0b, 4	; 11
				histerezis = 7;
 4c8:	c7 e0       	ldi	r28, 0x07	; 7
			}
			if ( currTemp > (setTemp - 50) ) {
 4ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setTemp>
 4ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setTemp+0x1>
 4d2:	c2 97       	sbiw	r24, 0x32	; 50
 4d4:	86 17       	cp	r24, r22
 4d6:	97 07       	cpc	r25, r23
 4d8:	10 f4       	brcc	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				REL2_ON();
 4da:	5d 9a       	sbi	0x0b, 5	; 11
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else {
				REL2_OFF();
 4de:	5d 98       	cbi	0x0b, 5	; 11
				}
		}
		if (flag.readTemp) 
 4e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 4e4:	80 ff       	sbrs	r24, 0
 4e6:	14 c0       	rjmp	.+40     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		{
			flag.readTemp = FALSE;
 4e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flag+0x1>
 4ec:	8e 7f       	andi	r24, 0xFE	; 254
 4ee:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flag+0x1>
			currTemperature = (adcResult * 17) / 24;
 4f2:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <adcResult>
 4f6:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <adcResult+0x1>
 4fa:	d2 9f       	mul	r29, r18
 4fc:	c0 01       	movw	r24, r0
 4fe:	d3 9f       	mul	r29, r19
 500:	90 0d       	add	r25, r0
 502:	11 24       	eor	r1, r1
 504:	b8 01       	movw	r22, r16
 506:	fb d0       	rcall	.+502    	; 0x6fe <__divmodhi4>
 508:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <currTemperature+0x1>
 50c:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <currTemperature>
		}
		if (flag.setTempVisible) 
 510:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 514:	86 ff       	sbrs	r24, 6
 516:	0a c0       	rjmp	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		{
			ResultBcd(setTemp, setTemp, 1000, dataOut_);
 518:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setTemp>
 51c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setTemp+0x1>
 520:	25 e0       	ldi	r18, 0x05	; 5
 522:	31 e0       	ldi	r19, 0x01	; 1
 524:	48 ee       	ldi	r20, 0xE8	; 232
 526:	53 e0       	ldi	r21, 0x03	; 3
 528:	bc 01       	movw	r22, r24
 52a:	0c c0       	rjmp	.+24     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
		}
		else
		{
			ResultBcd(currTemperature, adcResult, 1000, dataOut_);
 52c:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <adcResult>
 530:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <adcResult+0x1>
 534:	25 e0       	ldi	r18, 0x05	; 5
 536:	31 e0       	ldi	r19, 0x01	; 1
 538:	48 ee       	ldi	r20, 0xE8	; 232
 53a:	53 e0       	ldi	r21, 0x03	; 3
 53c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <currTemperature>
 540:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <currTemperature+0x1>
 544:	7f de       	rcall	.-770    	; 0x244 <ResultBcd>
		}
		if (flag.lcdUpdate) 
 546:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 54a:	81 ff       	sbrs	r24, 1
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		{
			LcdUpdate(dataOut_);	
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	b7 de       	rcall	.-658    	; 0x2c2 <LcdUpdate>
			flag.lcdUpdate = 0;
 554:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 558:	8d 7f       	andi	r24, 0xFD	; 253
 55a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
		}
		if(flag.eepromWrite)
 55e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 562:	83 ff       	sbrs	r24, 3
 564:	61 cf       	rjmp	.-318    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			SaveEepromMode();
 566:	8d de       	rcall	.-742    	; 0x282 <SaveEepromMode>
 568:	5f cf       	rjmp	.-322    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

0000056a <UsartInit>:
volatile uint8_t rxHeadBuffer;
volatile uint8_t rxCountBuffer;

void UsartInit(void){
	uint16_t i = USART_BAUDRATE_DIV;
	UBRR0L = i;
 56a:	89 e1       	ldi	r24, 0x19	; 25
 56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H = i >> 8;
 570:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//8-bit ,1-stop bit,no parity
 574:	e2 ec       	ldi	r30, 0xC2	; 194
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	86 60       	ori	r24, 0x06	; 6
 57c:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) |
 57e:	e1 ec       	ldi	r30, 0xC1	; 193
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	88 6d       	ori	r24, 0xD8	; 216
 586:	80 83       	st	Z, r24
 588:	08 95       	ret

0000058a <UsartPutChar>:
			(1 << RXCIE0);//enable tx ,enable interrupt tx
}

void UsartPutChar(uint8_t ch){
	if(bit_is_set(UCSR0A,UDRE0) && txCountBuffer == 0)
 58a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 58e:	95 ff       	sbrs	r25, 5
 590:	07 c0       	rjmp	.+14     	; 0x5a0 <UsartPutChar+0x16>
 592:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 596:	91 11       	cpse	r25, r1
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <UsartPutChar+0x16>
		UDR0 = ch;
 59a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 59e:	08 95       	ret
	else if(txCountBuffer < USART_TX_BUFFER_SIZE){
 5a0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 5a4:	94 31       	cpi	r25, 0x14	; 20
 5a6:	b0 f4       	brcc	.+44     	; 0x5d4 <UsartPutChar+0x4a>
		txCountBuffer ++;
 5a8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <txCountBuffer>
 5ac:	9f 5f       	subi	r25, 0xFF	; 255
 5ae:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <txCountBuffer>
		usartTxBuffer[txHeadBuffer] = ch;
 5b2:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <txHeadBuffer>
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	e4 5d       	subi	r30, 0xD4	; 212
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	80 83       	st	Z, r24
		txHeadBuffer ++;
 5be:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <txHeadBuffer>
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <txHeadBuffer>
		if(txHeadBuffer == USART_TX_BUFFER_SIZE)
 5c8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <txHeadBuffer>
 5cc:	84 31       	cpi	r24, 0x14	; 20
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <UsartPutChar+0x4a>
			txHeadBuffer = 0;
 5d0:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <txHeadBuffer>
 5d4:	08 95       	ret

000005d6 <UsartPutString>:
	}
}

void UsartPutString(uint8_t *string){
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	ec 01       	movw	r28, r24
	while(*string){
 5dc:	89 91       	ld	r24, Y+
 5de:	88 23       	and	r24, r24
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <UsartPutString+0x10>
		UsartPutChar(*string);
 5e2:	d3 df       	rcall	.-90     	; 0x58a <UsartPutChar>
 5e4:	fb cf       	rjmp	.-10     	; 0x5dc <UsartPutString+0x6>
		string++;
	}
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <UsartGetChar>:

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
	if(rxCountBuffer){
 5ec:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 5f0:	88 23       	and	r24, r24
 5f2:	b9 f0       	breq	.+46     	; 0x622 <UsartGetChar+0x36>
		ch = usartRxBuffer[rxTailBuffer];
 5f4:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <rxTailBuffer>
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	ea 5e       	subi	r30, 0xEA	; 234
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	80 81       	ld	r24, Z
		rxCountBuffer --;
 600:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rxCountBuffer>
 604:	91 50       	subi	r25, 0x01	; 1
 606:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rxCountBuffer>
		rxTailBuffer ++;
 60a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rxTailBuffer>
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rxTailBuffer>
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
 614:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rxTailBuffer>
 618:	94 31       	cpi	r25, 0x14	; 20
 61a:	21 f4       	brne	.+8      	; 0x624 <UsartGetChar+0x38>
			rxTailBuffer = 0;
 61c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rxTailBuffer>
 620:	08 95       	ret
		string++;
	}
}

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
 622:	80 e0       	ldi	r24, 0x00	; 0
		rxTailBuffer ++;
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
			rxTailBuffer = 0;
	}
	return ch;
}
 624:	08 95       	ret

00000626 <__vector_20>:

ISR(USART_TX_vect)
{
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	8f 93       	push	r24
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	if(txCountBuffer){
 636:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <txCountBuffer>
 63a:	88 23       	and	r24, r24
 63c:	c1 f0       	breq	.+48     	; 0x66e <__vector_20+0x48>
		UDR0	= usartTxBuffer[txTailBuffer];
 63e:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <txTailBuffer>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	e4 5d       	subi	r30, 0xD4	; 212
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	80 81       	ld	r24, Z
 64a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
		txCountBuffer --;
 64e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <txCountBuffer>
 652:	81 50       	subi	r24, 0x01	; 1
 654:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <txCountBuffer>
		txTailBuffer ++;
 658:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txTailBuffer>
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txTailBuffer>
		if(txTailBuffer == USART_TX_BUFFER_SIZE)
 662:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txTailBuffer>
 666:	84 31       	cpi	r24, 0x14	; 20
 668:	11 f4       	brne	.+4      	; 0x66e <__vector_20+0x48>
			txTailBuffer = 0;
 66a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <txTailBuffer>
	}
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	8f 91       	pop	r24
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_18>:

ISR(USART_RX_vect){
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	8f 93       	push	r24
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
	if(rxCountBuffer < USART_RX_BUFFER_SIZE){
 68e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 692:	84 31       	cpi	r24, 0x14	; 20
 694:	c0 f4       	brcc	.+48     	; 0x6c6 <__vector_18+0x48>
		usartRxBuffer[rxHeadBuffer] = UDR0;
 696:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <rxHeadBuffer>
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 6a0:	ea 5e       	subi	r30, 0xEA	; 234
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
		rxHeadBuffer ++;
 6a6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rxHeadBuffer>
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rxHeadBuffer>
		rxCountBuffer ++;
 6b0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rxCountBuffer>
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <rxCountBuffer>
		if(rxHeadBuffer ==  USART_TX_BUFFER_SIZE)
 6ba:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rxHeadBuffer>
 6be:	84 31       	cpi	r24, 0x14	; 20
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__vector_18+0x48>
			rxHeadBuffer = 0;
 6c2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rxHeadBuffer>
	}
}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	8f 91       	pop	r24
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__udivmodhi4>:
 6d6:	aa 1b       	sub	r26, r26
 6d8:	bb 1b       	sub	r27, r27
 6da:	51 e1       	ldi	r21, 0x11	; 17
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <__udivmodhi4_ep>

000006de <__udivmodhi4_loop>:
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	a6 17       	cp	r26, r22
 6e4:	b7 07       	cpc	r27, r23
 6e6:	10 f0       	brcs	.+4      	; 0x6ec <__udivmodhi4_ep>
 6e8:	a6 1b       	sub	r26, r22
 6ea:	b7 0b       	sbc	r27, r23

000006ec <__udivmodhi4_ep>:
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	5a 95       	dec	r21
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__udivmodhi4_loop>
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	bc 01       	movw	r22, r24
 6fa:	cd 01       	movw	r24, r26
 6fc:	08 95       	ret

000006fe <__divmodhi4>:
 6fe:	97 fb       	bst	r25, 7
 700:	07 2e       	mov	r0, r23
 702:	16 f4       	brtc	.+4      	; 0x708 <__divmodhi4+0xa>
 704:	00 94       	com	r0
 706:	06 d0       	rcall	.+12     	; 0x714 <__divmodhi4_neg1>
 708:	77 fd       	sbrc	r23, 7
 70a:	08 d0       	rcall	.+16     	; 0x71c <__divmodhi4_neg2>
 70c:	e4 df       	rcall	.-56     	; 0x6d6 <__udivmodhi4>
 70e:	07 fc       	sbrc	r0, 7
 710:	05 d0       	rcall	.+10     	; 0x71c <__divmodhi4_neg2>
 712:	3e f4       	brtc	.+14     	; 0x722 <__divmodhi4_exit>

00000714 <__divmodhi4_neg1>:
 714:	90 95       	com	r25
 716:	81 95       	neg	r24
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__divmodhi4_neg2>:
 71c:	70 95       	com	r23
 71e:	61 95       	neg	r22
 720:	7f 4f       	sbci	r23, 0xFF	; 255

00000722 <__divmodhi4_exit>:
 722:	08 95       	ret

00000724 <eeprom_read_word>:
 724:	a8 e1       	ldi	r26, 0x18	; 24
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	42 e0       	ldi	r20, 0x02	; 2
 72a:	05 c0       	rjmp	.+10     	; 0x736 <eeprom_read_blraw>

0000072c <eeprom_write_word>:
 72c:	11 d0       	rcall	.+34     	; 0x750 <eeprom_write_byte>
 72e:	27 2f       	mov	r18, r23
 730:	10 c0       	rjmp	.+32     	; 0x752 <eeprom_write_r18>

00000732 <eeprom_read_block>:
 732:	dc 01       	movw	r26, r24
 734:	86 2f       	mov	r24, r22

00000736 <eeprom_read_blraw>:
 736:	e8 2f       	mov	r30, r24
 738:	f9 99       	sbic	0x1f, 1	; 31
 73a:	fe cf       	rjmp	.-4      	; 0x738 <eeprom_read_blraw+0x2>
 73c:	12 bc       	out	0x22, r1	; 34
 73e:	05 c0       	rjmp	.+10     	; 0x74a <eeprom_read_blraw+0x14>
 740:	e1 bd       	out	0x21, r30	; 33
 742:	f8 9a       	sbi	0x1f, 0	; 31
 744:	e3 95       	inc	r30
 746:	00 b4       	in	r0, 0x20	; 32
 748:	0d 92       	st	X+, r0
 74a:	41 50       	subi	r20, 0x01	; 1
 74c:	c8 f7       	brcc	.-14     	; 0x740 <eeprom_read_blraw+0xa>
 74e:	08 95       	ret

00000750 <eeprom_write_byte>:
 750:	26 2f       	mov	r18, r22

00000752 <eeprom_write_r18>:
 752:	f9 99       	sbic	0x1f, 1	; 31
 754:	fe cf       	rjmp	.-4      	; 0x752 <eeprom_write_r18>
 756:	1f ba       	out	0x1f, r1	; 31
 758:	12 bc       	out	0x22, r1	; 34
 75a:	81 bd       	out	0x21, r24	; 33
 75c:	20 bd       	out	0x20, r18	; 32
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	fa 9a       	sbi	0x1f, 2	; 31
 764:	f9 9a       	sbi	0x1f, 1	; 31
 766:	0f be       	out	0x3f, r0	; 63
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
