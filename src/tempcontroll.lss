
tempcontroll.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000644  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080010c  0080010c  00000704  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001125  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b25  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000006db  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e8  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000065c  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000003a0  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	4e c0       	rjmp	.+156    	; 0xbe <__vector_16>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	a9 c2       	rjmp	.+1362   	; 0x578 <__vector_18>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	7b c2       	rjmp	.+1270   	; 0x520 <__vector_20>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>
  34:	84 c1       	rjmp	.+776    	; 0x33e <__stack+0x3f>
  36:	7d c1       	rjmp	.+762    	; 0x332 <__stack+0x33>
  38:	8b c1       	rjmp	.+790    	; 0x350 <__stack+0x51>
  3a:	7b c1       	rjmp	.+758    	; 0x332 <__stack+0x33>
  3c:	89 c1       	rjmp	.+786    	; 0x350 <__stack+0x51>
  3e:	88 c1       	rjmp	.+784    	; 0x350 <__stack+0x51>
  40:	7e c1       	rjmp	.+764    	; 0x33e <__stack+0x3f>
  42:	7d c1       	rjmp	.+762    	; 0x33e <__stack+0x3f>
  44:	85 c1       	rjmp	.+778    	; 0x350 <__stack+0x51>
  46:	84 c1       	rjmp	.+776    	; 0x350 <__stack+0x51>
  48:	74 c1       	rjmp	.+744    	; 0x332 <__stack+0x33>
  4a:	82 c1       	rjmp	.+772    	; 0x350 <__stack+0x51>
  4c:	72 c1       	rjmp	.+740    	; 0x332 <__stack+0x33>
  4e:	77 c1       	rjmp	.+750    	; 0x33e <__stack+0x3f>

00000050 <__trampolines_end>:
  50:	c0 f9       	bld	r28, 0
  52:	a4 b0       	in	r10, 0x04	; 4
  54:	99 92       	st	Y+, r9
  56:	82 f8       	bld	r8, 2
  58:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__EEPROM_REGION_LENGTH__+0x7f00bf>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d2 e0       	ldi	r29, 0x02	; 2
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e4       	ldi	r30, 0x44	; 68
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 30       	cpi	r26, 0x0C	; 12
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	ac e0       	ldi	r26, 0x0C	; 12
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a9 34       	cpi	r26, 0x49	; 73
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	82 d1       	rcall	.+772    	; 0x394 <main>
  90:	d7 c2       	rjmp	.+1454   	; 0x640 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <Init>:
volatile uint16_t countSetTempVisible = 0;


void Init(void)
{
	LED_DDR |= (1 << LED_OUT);
  94:	53 9a       	sbi	0x0a, 3	; 10
	LED_OFF;
  96:	5b 9a       	sbi	0x0b, 3	; 11
	setTemp = eeprom_read_word(&setTempEeprom);//read from eeprom temp value
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	ad d2       	rcall	.+1370   	; 0x5f8 <eeprom_read_word>
  9e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <setTemp+0x1>
  a2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <setTemp>
  a6:	08 95       	ret

000000a8 <Timer0Init>:
void Timer0Init(void)
{
#if(F_CPU != 8000000)
#error ***You must set TCCR0
#endif
	TCCR0B|=(1<<CS02)|(1<<CS00);//T0_PRESC = 1024
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	85 60       	ori	r24, 0x05	; 5
  ac:	85 bd       	out	0x25, r24	; 37
	TCNT0 = T0_INIT;
  ae:	88 ef       	ldi	r24, 0xF8	; 248
  b0:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);//enable interrupt overllow timer0
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	TCNT0 = T0_INIT;
  cc:	88 ef       	ldi	r24, 0xF8	; 248
  ce:	86 bd       	out	0x26, r24	; 38
	countTimeKeyScan --;
  d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
	countTimeLcdUpdate --;
  da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
	countTimeAdcRead --;
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
	countTimeTempRead --;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(!countTimeKeyScan)
 100:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
 104:	81 11       	cpse	r24, r1
 106:	08 c0       	rjmp	.+16     	; 0x118 <__vector_16+0x5a>
	{
		countTimeKeyScan = PERIOD_KEY_SCAN;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
		flag.keyScan = TRUE;
 10e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeLcdUpdate)
 118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
 11c:	81 11       	cpse	r24, r1
 11e:	08 c0       	rjmp	.+16     	; 0x130 <__vector_16+0x72>
	{
		countTimeLcdUpdate = PERIOD_LCD_UPDATE;
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
		flag.lcdUpdate = TRUE;
 126:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeAdcRead)
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
 134:	81 11       	cpse	r24, r1
 136:	08 c0       	rjmp	.+16     	; 0x148 <__vector_16+0x8a>
	{
		countTimeAdcRead = PERIOD_ADC_READ;
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
		flag.adcRead = TRUE;
 13e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeTempRead)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 150:	89 2b       	or	r24, r25
 152:	59 f4       	brne	.+22     	; 0x16a <__vector_16+0xac>
	{
		countTimeTempRead = PERIOD_TEMP_UPDATE;
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		flag.readTemp = TRUE;
 160:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag+0x1>
	}
	if(countTimeWriteEeprom)
 16a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 16e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 172:	89 2b       	or	r24, r25
 174:	a1 f0       	breq	.+40     	; 0x19e <__vector_16+0xe0>
	{
		countTimeWriteEeprom --;
 176:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 17a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <countTimeWriteEeprom+0x1>
 184:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <countTimeWriteEeprom>
		if(countTimeWriteEeprom == 0)
 188:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 18c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 190:	89 2b       	or	r24, r25
 192:	29 f4       	brne	.+10     	; 0x19e <__vector_16+0xe0>
			flag.eepromWrite = TRUE;
 194:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(countSetTempVisible)
 19e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1a2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1a6:	89 2b       	or	r24, r25
 1a8:	a1 f0       	breq	.+40     	; 0x1d2 <__vector_16+0x114>
	{
		countSetTempVisible --;
 1aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ae:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if(countSetTempVisible == 0)
 1bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <__vector_16+0x114>
			flag.setTempVisible = FALSE;
 1c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
}
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <ADCInit>:
void ADCInit(void)
{
#if(F_CPU != 8000000)
#error ***You must set ADCSRA
#endif
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADEN); //PRESC F_CPU/64
 1e0:	ea e7       	ldi	r30, 0x7A	; 122
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	86 68       	ori	r24, 0x86	; 134
 1e8:	80 83       	st	Z, r24
	ADMUX|=ADC_VREF_TYPE; //vref
 1ea:	ec e7       	ldi	r30, 0x7C	; 124
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 6c       	ori	r24, 0xC0	; 192
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <ADCRead>:
}

int16_t ADCRead(uint8_t chanel)
{
	/* ADMUX = ADC_VREF_TYPE | chanel; */
	ADMUX &= ~ADC_VREF_TYPE;
 1f6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 1fa:	9f 73       	andi	r25, 0x3F	; 63
 1fc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADMUX |= chanel;
 200:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 204:	89 2b       	or	r24, r25
 206:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <ADCRead+0x16>
 210:	00 c0       	rjmp	.+0      	; 0x212 <ADCRead+0x1c>
	_delay_us(10);//delay needed for stabilization of the ACD input voltag
	ADCSRA |= (1 << ADSC);//start convertion
 212:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	while ((ADCSRA & (1 << ADIF)) == 0);//wait for complete conversion
 21c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 220:	84 ff       	sbrs	r24, 4
 222:	fc cf       	rjmp	.-8      	; 0x21c <ADCRead+0x26>
	ADCSRA |=(1 << ADIF);
 224:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	/* flag.adcRead = FALSE; */
	return ADCW;
 22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
 236:	08 95       	ret

00000238 <ResultBcd>:

void ResultBcd(uint16_t data, uint8_t dataOut[4])
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	fb 01       	movw	r30, r22
	/* 	{ */
	/* 		dataOut[i] = 10;//виводимо на дисплей рисочки */
	/* 	} */
	/* 	return ; */
	/* } */
	dataOut[1] = data/100;
 240:	64 e6       	ldi	r22, 0x64	; 100
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	c5 d1       	rcall	.+906    	; 0x5d0 <__udivmodhi4>
 246:	61 83       	std	Z+1, r22	; 0x01
	dataOut[2] = (data / 10) % 10;
 248:	2a e0       	ldi	r18, 0x0A	; 10
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	ce 01       	movw	r24, r28
 24e:	b9 01       	movw	r22, r18
 250:	bf d1       	rcall	.+894    	; 0x5d0 <__udivmodhi4>
 252:	48 2f       	mov	r20, r24
 254:	cb 01       	movw	r24, r22
 256:	b9 01       	movw	r22, r18
 258:	bb d1       	rcall	.+886    	; 0x5d0 <__udivmodhi4>
 25a:	82 83       	std	Z+2, r24	; 0x02
	dataOut[3] = data % 10;
 25c:	43 83       	std	Z+3, r20	; 0x03
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <SaveEepromMode>:

void SaveEepromMode(void)
{
	if(flag.tempEepromWrite)
 264:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 268:	85 ff       	sbrs	r24, 5
 26a:	0c c0       	rjmp	.+24     	; 0x284 <SaveEepromMode+0x20>
	{
		eeprom_write_word(&setTempEeprom,setTemp);
 26c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <setTemp>
 270:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <setTemp+0x1>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	c3 d1       	rcall	.+902    	; 0x600 <eeprom_write_word>
		flag.tempEepromWrite = FALSE;
 27a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	flag.eepromWrite = FALSE;
 284:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
 28e:	08 95       	ret

00000290 <LcdInit>:

#include "lcd.h"

void LcdInit(void)
{
	LCD_DDR = 0xFF;			//port out
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	94 b9       	out	0x04, r25	; 4
	DIG_DDR |= DIG_MASK;	//port out
 294:	87 b1       	in	r24, 0x07	; 7
 296:	88 63       	ori	r24, 0x38	; 56
 298:	87 b9       	out	0x07, r24	; 7
	DIG_PORT |= DIG_MASK;	//hight level, off all digits
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	88 63       	ori	r24, 0x38	; 56
 29e:	88 b9       	out	0x08, r24	; 8
	LCD_PORT = 0xFF; //Off all segments
 2a0:	95 b9       	out	0x05, r25	; 5
 2a2:	08 95       	ret

000002a4 <LcdUpdate>:
}

void LcdUpdate(uint8_t* data)
{
	static uint8_t count = 0;
	DIG_PORT |= DIG_MASK; //Off all digits
 2a4:	28 b1       	in	r18, 0x08	; 8
 2a6:	28 63       	ori	r18, 0x38	; 56
 2a8:	28 b9       	out	0x08, r18	; 8
	if(count == 0)
 2aa:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count.1771>
 2ae:	21 11       	cpse	r18, r1
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <LcdUpdate+0x12>
	{
		DIG_PORT &= ~(1 << DIG_3);
 2b2:	45 98       	cbi	0x08, 5	; 8
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
        /* View mode heating */
	}
	else if(count == 1)
 2b6:	21 30       	cpi	r18, 0x01	; 1
 2b8:	11 f4       	brne	.+4      	; 0x2be <LcdUpdate+0x1a>
	{
		DIG_PORT &= ~(1 << DIG_2);
 2ba:	44 98       	cbi	0x08, 4	; 8
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
	}
	else if(count == 2)
 2be:	22 30       	cpi	r18, 0x02	; 2
 2c0:	61 f4       	brne	.+24     	; 0x2da <LcdUpdate+0x36>
	{
		DIG_PORT &= ~(1 << DIG_1);
 2c2:	43 98       	cbi	0x08, 3	; 8
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
 2c4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count.1771>
 2c8:	fc 01       	movw	r30, r24
 2ca:	e2 0f       	add	r30, r18
 2cc:	f1 1d       	adc	r31, r1
 2ce:	e1 81       	ldd	r30, Z+1	; 0x01
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 5b       	subi	r30, 0xB0	; 176
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	e4 91       	lpm	r30, Z
 2d8:	e5 b9       	out	0x05, r30	; 5
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 2da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count.1771>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
	if(count > 2)
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <LcdUpdate+0x46>
		DIG_PORT &= ~(1 << DIG_1);
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 2e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count.1771>
 2e8:	08 95       	ret
	if(count > 2)
		count = 0;
 2ea:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count.1771>
 2ee:	08 95       	ret

000002f0 <ENC_Init>:
static uint8_t encState = 0;
static volatile int16_t encValue = 0;

void ENC_Init(void)
{
	ENC_DDR &= ~ENC_MASK;// In
 2f0:	8a b1       	in	r24, 0x0a	; 10
 2f2:	8f 73       	andi	r24, 0x3F	; 63
 2f4:	8a b9       	out	0x0a, r24	; 10
	ENC_PORT |= ENC_MASK;//Pull-up
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	80 6c       	ori	r24, 0xC0	; 192
 2fa:	8b b9       	out	0x0b, r24	; 11
 2fc:	08 95       	ret

000002fe <ENC_Scan>:
}

uint16_t ENC_Scan(void)
{
	uint8_t newState = ENC_PIN >> 6;
 2fe:	29 b1       	in	r18, 0x09	; 9
 300:	22 95       	swap	r18
 302:	26 95       	lsr	r18
 304:	26 95       	lsr	r18
 306:	23 70       	andi	r18, 0x03	; 3
	uint8_t fullState = newState | (encState << 2);
	switch (fullState) 
 308:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <encState>
 30c:	34 e0       	ldi	r19, 0x04	; 4
 30e:	83 9f       	mul	r24, r19
 310:	c0 01       	movw	r24, r0
 312:	11 24       	eor	r1, r1
 314:	e2 2f       	mov	r30, r18
 316:	e8 2b       	or	r30, r24
 318:	8e 2f       	mov	r24, r30
 31a:	ee 0f       	add	r30, r30
 31c:	99 0b       	sbc	r25, r25
 31e:	aa 0b       	sbc	r26, r26
 320:	bb 0b       	sbc	r27, r27
 322:	fc 01       	movw	r30, r24
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	ee 30       	cpi	r30, 0x0E	; 14
 328:	f1 05       	cpc	r31, r1
 32a:	90 f4       	brcc	.+36     	; 0x350 <__stack+0x51>
 32c:	e6 5e       	subi	r30, 0xE6	; 230
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	09 94       	ijmp
	{
		case 0x2: case 0x4: case 0xB: case 0xD:
			encValue--;
 332:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 336:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	05 c0       	rjmp	.+10     	; 0x348 <__stack+0x49>
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
 33e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 342:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <encValue+0x1>
 34c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <encValue>
			break;
	}
	encState = newState;
 350:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <encState>
	if (encValue > 1000) 
 354:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 358:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 35c:	89 3e       	cpi	r24, 0xE9	; 233
 35e:	93 40       	sbci	r25, 0x03	; 3
 360:	34 f0       	brlt	.+12     	; 0x36e <__stack+0x6f>
	{
		encValue = 1000;
 362:	88 ee       	ldi	r24, 0xE8	; 232
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <encValue+0x1>
 36a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <encValue>
	}
	if (encValue < 0) 
 36e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 372:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 376:	97 ff       	sbrs	r25, 7
 378:	04 c0       	rjmp	.+8      	; 0x382 <__stack+0x83>
	{
		encValue = 0;
 37a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <encValue+0x1>
 37e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <encValue>
	}
	return (uint16_t) encValue >> 2;
 382:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 386:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
}
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	08 95       	ret

00000394 <main>:
uint8_t a = 0;
uint16_t data = 312;

int main(void)
{
	ENC_Init();
 394:	ad df       	rcall	.-166    	; 0x2f0 <ENC_Init>
	UsartInit();
 396:	66 d0       	rcall	.+204    	; 0x464 <UsartInit>
	LcdInit();
 398:	7b df       	rcall	.-266    	; 0x290 <LcdInit>
	Timer0Init();
 39a:	86 de       	rcall	.-756    	; 0xa8 <Timer0Init>
	/* ADCInit(); */
	Init();
 39c:	7b de       	rcall	.-778    	; 0x94 <Init>
	sei();
 39e:	78 94       	sei
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3a0:	80 ed       	ldi	r24, 0xD0	; 208
 3a2:	97 e0       	ldi	r25, 0x07	; 7
 3a4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 3a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	flag.setTempVisible = TRUE;
 3ac:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3b0:	80 64       	ori	r24, 0x40	; 64
 3b2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	{
		if (flag.keyScan) 
		{
			flag.keyScan = 0;	
			setTemp = ENC_Scan();
			countTimeWriteEeprom = TIME_WRITE_EEPROM;
 3b6:	c8 eb       	ldi	r28, 0xB8	; 184
 3b8:	db e0       	ldi	r29, 0x0B	; 11
			flag.tempEepromWrite = TRUE;
			countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3ba:	00 ed       	ldi	r16, 0xD0	; 208
 3bc:	17 e0       	ldi	r17, 0x07	; 7
		{
			flag.readTemp = 0;
			if (a == 0) 
			{
				LED_ON;
				a = 1;
 3be:	ff 24       	eor	r15, r15
 3c0:	f3 94       	inc	r15
	sei();
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
	flag.setTempVisible = TRUE;
	while(1)
	{
		if (flag.keyScan) 
 3c2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	1c c0       	rjmp	.+56     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			flag.keyScan = 0;	
 3ca:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3ce:	8e 7f       	andi	r24, 0xFE	; 254
 3d0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
			setTemp = ENC_Scan();
 3d4:	94 df       	rcall	.-216    	; 0x2fe <ENC_Scan>
 3d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <setTemp+0x1>
 3da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <setTemp>
			countTimeWriteEeprom = TIME_WRITE_EEPROM;
 3de:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <countTimeWriteEeprom+0x1>
 3e2:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <countTimeWriteEeprom>
			flag.tempEepromWrite = TRUE;
 3e6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
			countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3f0:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <__data_end+0x1>
 3f4:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <__data_end>
			flag.setTempVisible = TRUE;
 3f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
		}
		if (flag.setTempVisible) 
 402:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
		{
			ResultBcd(setTemp, dataOut_);
 406:	67 e0       	ldi	r22, 0x07	; 7
 408:	71 e0       	ldi	r23, 0x01	; 1
			countTimeWriteEeprom = TIME_WRITE_EEPROM;
			flag.tempEepromWrite = TRUE;
			countSetTempVisible = TIME_SET_TEMP_VISIBLE;
			flag.setTempVisible = TRUE;
		}
		if (flag.setTempVisible) 
 40a:	86 ff       	sbrs	r24, 6
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			ResultBcd(setTemp, dataOut_);
 40e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <setTemp>
 412:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <setTemp+0x1>
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		}
		else
		{
			ResultBcd(data, dataOut_);
 418:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 41c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <data+0x1>
 420:	0b df       	rcall	.-490    	; 0x238 <ResultBcd>
		}
		if (flag.lcdUpdate) 
 422:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 426:	81 ff       	sbrs	r24, 1
 428:	08 c0       	rjmp	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		{
			LcdUpdate(dataOut_);	
 42a:	87 e0       	ldi	r24, 0x07	; 7
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	3a df       	rcall	.-396    	; 0x2a4 <LcdUpdate>
			flag.lcdUpdate = 0;
 430:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 434:	8d 7f       	andi	r24, 0xFD	; 253
 436:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
		}
		if (flag.readTemp) 
 43a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 43e:	80 ff       	sbrs	r24, 0
 440:	c0 cf       	rjmp	.-128    	; 0x3c2 <main+0x2e>
		{
			flag.readTemp = 0;
 442:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 446:	8e 7f       	andi	r24, 0xFE	; 254
 448:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag+0x1>
			if (a == 0) 
 44c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <a>
 450:	81 11       	cpse	r24, r1
 452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				LED_ON;
 454:	5b 98       	cbi	0x0b, 3	; 11
				a = 1;
 456:	f0 92 14 01 	sts	0x0114, r15	; 0x800114 <a>
 45a:	b3 cf       	rjmp	.-154    	; 0x3c2 <main+0x2e>
			}		
			else {
				LED_OFF;
 45c:	5b 9a       	sbi	0x0b, 3	; 11
				a = 0;
 45e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <a>
 462:	af cf       	rjmp	.-162    	; 0x3c2 <main+0x2e>

00000464 <UsartInit>:
volatile uint8_t rxHeadBuffer;
volatile uint8_t rxCountBuffer;

void UsartInit(void){
	uint16_t i = USART_BAUDRATE_DIV;
	UBRR0L = i;
 464:	89 e1       	ldi	r24, 0x19	; 25
 466:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H = i >> 8;
 46a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//8-bit ,1-stop bit,no parity
 46e:	e2 ec       	ldi	r30, 0xC2	; 194
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	86 60       	ori	r24, 0x06	; 6
 476:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) |
 478:	e1 ec       	ldi	r30, 0xC1	; 193
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	88 6d       	ori	r24, 0xD8	; 216
 480:	80 83       	st	Z, r24
 482:	08 95       	ret

00000484 <UsartPutChar>:
			(1 << RXCIE0);//enable tx ,enable interrupt tx
}

void UsartPutChar(uint8_t ch){
	if(bit_is_set(UCSR0A,UDRE0) && txCountBuffer == 0)
 484:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 488:	95 ff       	sbrs	r25, 5
 48a:	07 c0       	rjmp	.+14     	; 0x49a <UsartPutChar+0x16>
 48c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 490:	91 11       	cpse	r25, r1
 492:	03 c0       	rjmp	.+6      	; 0x49a <UsartPutChar+0x16>
		UDR0 = ch;
 494:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 498:	08 95       	ret
	else if(txCountBuffer < USART_TX_BUFFER_SIZE){
 49a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 49e:	94 31       	cpi	r25, 0x14	; 20
 4a0:	b0 f4       	brcc	.+44     	; 0x4ce <UsartPutChar+0x4a>
		txCountBuffer ++;
 4a2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 4a6:	9f 5f       	subi	r25, 0xFF	; 255
 4a8:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <txCountBuffer>
		usartTxBuffer[txHeadBuffer] = ch;
 4ac:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <txHeadBuffer>
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e1 5d       	subi	r30, 0xD1	; 209
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	80 83       	st	Z, r24
		txHeadBuffer ++;
 4b8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <txHeadBuffer>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <txHeadBuffer>
		if(txHeadBuffer == USART_TX_BUFFER_SIZE)
 4c2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <txHeadBuffer>
 4c6:	84 31       	cpi	r24, 0x14	; 20
 4c8:	11 f4       	brne	.+4      	; 0x4ce <UsartPutChar+0x4a>
			txHeadBuffer = 0;
 4ca:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <txHeadBuffer>
 4ce:	08 95       	ret

000004d0 <UsartPutString>:
	}
}

void UsartPutString(uint8_t *string){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
	while(*string){
 4d6:	89 91       	ld	r24, Y+
 4d8:	88 23       	and	r24, r24
 4da:	11 f0       	breq	.+4      	; 0x4e0 <UsartPutString+0x10>
		UsartPutChar(*string);
 4dc:	d3 df       	rcall	.-90     	; 0x484 <UsartPutChar>
 4de:	fb cf       	rjmp	.-10     	; 0x4d6 <UsartPutString+0x6>
		string++;
	}
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <UsartGetChar>:

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
	if(rxCountBuffer){
 4e6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 4ea:	88 23       	and	r24, r24
 4ec:	b9 f0       	breq	.+46     	; 0x51c <UsartGetChar+0x36>
		ch = usartRxBuffer[rxTailBuffer];
 4ee:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <rxTailBuffer>
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	e5 5e       	subi	r30, 0xE5	; 229
 4f6:	fe 4f       	sbci	r31, 0xFE	; 254
 4f8:	80 81       	ld	r24, Z
		rxCountBuffer --;
 4fa:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <rxCountBuffer>
 4fe:	91 50       	subi	r25, 0x01	; 1
 500:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <rxCountBuffer>
		rxTailBuffer ++;
 504:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <rxTailBuffer>
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <rxTailBuffer>
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
 50e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <rxTailBuffer>
 512:	94 31       	cpi	r25, 0x14	; 20
 514:	21 f4       	brne	.+8      	; 0x51e <UsartGetChar+0x38>
			rxTailBuffer = 0;
 516:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxTailBuffer>
 51a:	08 95       	ret
		string++;
	}
}

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
 51c:	80 e0       	ldi	r24, 0x00	; 0
		rxTailBuffer ++;
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
			rxTailBuffer = 0;
	}
	return ch;
}
 51e:	08 95       	ret

00000520 <__vector_20>:

ISR(USART_TX_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	8f 93       	push	r24
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	if(txCountBuffer){
 530:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txCountBuffer>
 534:	88 23       	and	r24, r24
 536:	c1 f0       	breq	.+48     	; 0x568 <__vector_20+0x48>
		UDR0	= usartTxBuffer[txTailBuffer];
 538:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <txTailBuffer>
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	e1 5d       	subi	r30, 0xD1	; 209
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	80 81       	ld	r24, Z
 544:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
		txCountBuffer --;
 548:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txCountBuffer>
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txCountBuffer>
		txTailBuffer ++;
 552:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txTailBuffer>
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txTailBuffer>
		if(txTailBuffer == USART_TX_BUFFER_SIZE)
 55c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txTailBuffer>
 560:	84 31       	cpi	r24, 0x14	; 20
 562:	11 f4       	brne	.+4      	; 0x568 <__vector_20+0x48>
			txTailBuffer = 0;
 564:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <txTailBuffer>
	}
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	8f 91       	pop	r24
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <__vector_18>:

ISR(USART_RX_vect){
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	if(rxCountBuffer < USART_RX_BUFFER_SIZE){
 588:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 58c:	84 31       	cpi	r24, 0x14	; 20
 58e:	c0 f4       	brcc	.+48     	; 0x5c0 <__vector_18+0x48>
		usartRxBuffer[rxHeadBuffer] = UDR0;
 590:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <rxHeadBuffer>
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 59a:	e5 5e       	subi	r30, 0xE5	; 229
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	80 83       	st	Z, r24
		rxHeadBuffer ++;
 5a0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rxHeadBuffer>
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rxHeadBuffer>
		rxCountBuffer ++;
 5aa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 5ae:	8f 5f       	subi	r24, 0xFF	; 255
 5b0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <rxCountBuffer>
		if(rxHeadBuffer ==  USART_TX_BUFFER_SIZE)
 5b4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rxHeadBuffer>
 5b8:	84 31       	cpi	r24, 0x14	; 20
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__vector_18+0x48>
			rxHeadBuffer = 0;
 5bc:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rxHeadBuffer>
	}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	8f 91       	pop	r24
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__udivmodhi4>:
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	51 e1       	ldi	r21, 0x11	; 17
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__udivmodhi4_ep>

000005d8 <__udivmodhi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	a6 17       	cp	r26, r22
 5de:	b7 07       	cpc	r27, r23
 5e0:	10 f0       	brcs	.+4      	; 0x5e6 <__udivmodhi4_ep>
 5e2:	a6 1b       	sub	r26, r22
 5e4:	b7 0b       	sbc	r27, r23

000005e6 <__udivmodhi4_ep>:
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	5a 95       	dec	r21
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__udivmodhi4_loop>
 5ee:	80 95       	com	r24
 5f0:	90 95       	com	r25
 5f2:	bc 01       	movw	r22, r24
 5f4:	cd 01       	movw	r24, r26
 5f6:	08 95       	ret

000005f8 <eeprom_read_word>:
 5f8:	a8 e1       	ldi	r26, 0x18	; 24
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	42 e0       	ldi	r20, 0x02	; 2
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <eeprom_read_blraw>

00000600 <eeprom_write_word>:
 600:	11 d0       	rcall	.+34     	; 0x624 <eeprom_write_byte>
 602:	27 2f       	mov	r18, r23
 604:	10 c0       	rjmp	.+32     	; 0x626 <eeprom_write_r18>

00000606 <eeprom_read_block>:
 606:	dc 01       	movw	r26, r24
 608:	86 2f       	mov	r24, r22

0000060a <eeprom_read_blraw>:
 60a:	e8 2f       	mov	r30, r24
 60c:	f9 99       	sbic	0x1f, 1	; 31
 60e:	fe cf       	rjmp	.-4      	; 0x60c <eeprom_read_blraw+0x2>
 610:	12 bc       	out	0x22, r1	; 34
 612:	05 c0       	rjmp	.+10     	; 0x61e <eeprom_read_blraw+0x14>
 614:	e1 bd       	out	0x21, r30	; 33
 616:	f8 9a       	sbi	0x1f, 0	; 31
 618:	e3 95       	inc	r30
 61a:	00 b4       	in	r0, 0x20	; 32
 61c:	0d 92       	st	X+, r0
 61e:	41 50       	subi	r20, 0x01	; 1
 620:	c8 f7       	brcc	.-14     	; 0x614 <eeprom_read_blraw+0xa>
 622:	08 95       	ret

00000624 <eeprom_write_byte>:
 624:	26 2f       	mov	r18, r22

00000626 <eeprom_write_r18>:
 626:	f9 99       	sbic	0x1f, 1	; 31
 628:	fe cf       	rjmp	.-4      	; 0x626 <eeprom_write_r18>
 62a:	1f ba       	out	0x1f, r1	; 31
 62c:	12 bc       	out	0x22, r1	; 34
 62e:	81 bd       	out	0x21, r24	; 33
 630:	20 bd       	out	0x20, r18	; 32
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	fa 9a       	sbi	0x1f, 2	; 31
 638:	f9 9a       	sbi	0x1f, 1	; 31
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
