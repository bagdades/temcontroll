
tempcontroll.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000674  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000674  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080010c  0080010c  00000734  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001238  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b8c  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000070b  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e8  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000066d  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000403  00000000  00000000  000035cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	4e c0       	rjmp	.+156    	; 0xbe <__vector_16>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	c1 c2       	rjmp	.+1410   	; 0x5a8 <__vector_18>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	93 c2       	rjmp	.+1318   	; 0x550 <__vector_20>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>
  34:	8e c1       	rjmp	.+796    	; 0x352 <ENC_Scan+0x44>
  36:	86 c1       	rjmp	.+780    	; 0x344 <ENC_Scan+0x36>
  38:	bb c1       	rjmp	.+886    	; 0x3b0 <ENC_Scan+0xa2>
  3a:	84 c1       	rjmp	.+776    	; 0x344 <ENC_Scan+0x36>
  3c:	b9 c1       	rjmp	.+882    	; 0x3b0 <ENC_Scan+0xa2>
  3e:	b8 c1       	rjmp	.+880    	; 0x3b0 <ENC_Scan+0xa2>
  40:	88 c1       	rjmp	.+784    	; 0x352 <ENC_Scan+0x44>
  42:	87 c1       	rjmp	.+782    	; 0x352 <ENC_Scan+0x44>
  44:	b5 c1       	rjmp	.+874    	; 0x3b0 <ENC_Scan+0xa2>
  46:	b4 c1       	rjmp	.+872    	; 0x3b0 <ENC_Scan+0xa2>
  48:	7d c1       	rjmp	.+762    	; 0x344 <ENC_Scan+0x36>
  4a:	b2 c1       	rjmp	.+868    	; 0x3b0 <ENC_Scan+0xa2>
  4c:	7b c1       	rjmp	.+758    	; 0x344 <ENC_Scan+0x36>
  4e:	81 c1       	rjmp	.+770    	; 0x352 <ENC_Scan+0x44>

00000050 <__trampolines_end>:
  50:	c0 f9       	bld	r28, 0
  52:	a4 b0       	in	r10, 0x04	; 4
  54:	99 92       	st	Y+, r9
  56:	82 f8       	bld	r8, 2
  58:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__EEPROM_REGION_LENGTH__+0x7f00bf>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d2 e0       	ldi	r29, 0x02	; 2
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e7       	ldi	r30, 0x74	; 116
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 30       	cpi	r26, 0x0C	; 12
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	ac e0       	ldi	r26, 0x0C	; 12
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a9 34       	cpi	r26, 0x49	; 73
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	92 d1       	rcall	.+804    	; 0x3b4 <main>
  90:	ef c2       	rjmp	.+1502   	; 0x670 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <Init>:
volatile uint16_t countSetTempVisible = 0;


void Init(void)
{
	LED_DDR |= (1 << LED_OUT);
  94:	53 9a       	sbi	0x0a, 3	; 10
	LED_OFF;
  96:	5b 9a       	sbi	0x0b, 3	; 11
	setTemp = eeprom_read_word(&setTempEeprom);//read from eeprom temp value
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	c5 d2       	rcall	.+1418   	; 0x628 <eeprom_read_word>
  9e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <setTemp+0x1>
  a2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <setTemp>
  a6:	08 95       	ret

000000a8 <Timer0Init>:
void Timer0Init(void)
{
#if(F_CPU != 8000000)
#error ***You must set TCCR0
#endif
	TCCR0B|=(1<<CS02)|(1<<CS00);//T0_PRESC = 1024
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	85 60       	ori	r24, 0x05	; 5
  ac:	85 bd       	out	0x25, r24	; 37
	TCNT0 = T0_INIT;
  ae:	88 ef       	ldi	r24, 0xF8	; 248
  b0:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);//enable interrupt overllow timer0
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	TCNT0 = T0_INIT;
  cc:	88 ef       	ldi	r24, 0xF8	; 248
  ce:	86 bd       	out	0x26, r24	; 38
	countTimeKeyScan --;
  d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
	countTimeLcdUpdate --;
  da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
	countTimeAdcRead --;
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
	countTimeTempRead --;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(!countTimeKeyScan)
 100:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <countTimeKeyScan>
 104:	81 11       	cpse	r24, r1
 106:	08 c0       	rjmp	.+16     	; 0x118 <__vector_16+0x5a>
	{
		countTimeKeyScan = PERIOD_KEY_SCAN;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <countTimeKeyScan>
		flag.keyScan = TRUE;
 10e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeLcdUpdate)
 118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <countTimeLcdUpdate>
 11c:	81 11       	cpse	r24, r1
 11e:	08 c0       	rjmp	.+16     	; 0x130 <__vector_16+0x72>
	{
		countTimeLcdUpdate = PERIOD_LCD_UPDATE;
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <countTimeLcdUpdate>
		flag.lcdUpdate = TRUE;
 126:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeAdcRead)
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countTimeAdcRead>
 134:	81 11       	cpse	r24, r1
 136:	08 c0       	rjmp	.+16     	; 0x148 <__vector_16+0x8a>
	{
		countTimeAdcRead = PERIOD_ADC_READ;
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countTimeAdcRead>
		flag.adcRead = TRUE;
 13e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(!countTimeTempRead)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 150:	89 2b       	or	r24, r25
 152:	59 f4       	brne	.+22     	; 0x16a <__vector_16+0xac>
	{
		countTimeTempRead = PERIOD_TEMP_UPDATE;
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		flag.readTemp = TRUE;
 160:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag+0x1>
	}
	if(countTimeWriteEeprom)
 16a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 16e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 172:	89 2b       	or	r24, r25
 174:	a1 f0       	breq	.+40     	; 0x19e <__vector_16+0xe0>
	{
		countTimeWriteEeprom --;
 176:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 17a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <countTimeWriteEeprom+0x1>
 184:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <countTimeWriteEeprom>
		if(countTimeWriteEeprom == 0)
 188:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <countTimeWriteEeprom>
 18c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <countTimeWriteEeprom+0x1>
 190:	89 2b       	or	r24, r25
 192:	29 f4       	brne	.+10     	; 0x19e <__vector_16+0xe0>
			flag.eepromWrite = TRUE;
 194:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	if(countSetTempVisible)
 19e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1a2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1a6:	89 2b       	or	r24, r25
 1a8:	a1 f0       	breq	.+40     	; 0x1d2 <__vector_16+0x114>
	{
		countSetTempVisible --;
 1aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ae:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if(countSetTempVisible == 0)
 1bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <__vector_16+0x114>
			flag.setTempVisible = FALSE;
 1c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
}
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <ADCInit>:
void ADCInit(void)
{
#if(F_CPU != 8000000)
#error ***You must set ADCSRA
#endif
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADEN); //PRESC F_CPU/64
 1e0:	ea e7       	ldi	r30, 0x7A	; 122
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	86 68       	ori	r24, 0x86	; 134
 1e8:	80 83       	st	Z, r24
	ADMUX|=ADC_VREF_TYPE; //vref
 1ea:	ec e7       	ldi	r30, 0x7C	; 124
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 6c       	ori	r24, 0xC0	; 192
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <ADCRead>:
}

int16_t ADCRead(uint8_t chanel)
{
	/* ADMUX = ADC_VREF_TYPE | chanel; */
	ADMUX &= ~ADC_VREF_TYPE;
 1f6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 1fa:	9f 73       	andi	r25, 0x3F	; 63
 1fc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADMUX |= chanel;
 200:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 204:	89 2b       	or	r24, r25
 206:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <ADCRead+0x16>
 210:	00 c0       	rjmp	.+0      	; 0x212 <ADCRead+0x1c>
	_delay_us(10);//delay needed for stabilization of the ACD input voltag
	ADCSRA |= (1 << ADSC);//start convertion
 212:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	while ((ADCSRA & (1 << ADIF)) == 0);//wait for complete conversion
 21c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 220:	84 ff       	sbrs	r24, 4
 222:	fc cf       	rjmp	.-8      	; 0x21c <ADCRead+0x26>
	ADCSRA |=(1 << ADIF);
 224:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	/* flag.adcRead = FALSE; */
	return ADCW;
 22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
}
 236:	08 95       	ret

00000238 <ResultBcd>:

void ResultBcd(uint16_t data, uint8_t dataOut[4])
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	fb 01       	movw	r30, r22
	/* 	{ */
	/* 		dataOut[i] = 10;//виводимо на дисплей рисочки */
	/* 	} */
	/* 	return ; */
	/* } */
	dataOut[1] = data/100;
 240:	64 e6       	ldi	r22, 0x64	; 100
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	dd d1       	rcall	.+954    	; 0x600 <__udivmodhi4>
 246:	61 83       	std	Z+1, r22	; 0x01
	dataOut[2] = (data / 10) % 10;
 248:	2a e0       	ldi	r18, 0x0A	; 10
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	ce 01       	movw	r24, r28
 24e:	b9 01       	movw	r22, r18
 250:	d7 d1       	rcall	.+942    	; 0x600 <__udivmodhi4>
 252:	48 2f       	mov	r20, r24
 254:	cb 01       	movw	r24, r22
 256:	b9 01       	movw	r22, r18
 258:	d3 d1       	rcall	.+934    	; 0x600 <__udivmodhi4>
 25a:	82 83       	std	Z+2, r24	; 0x02
	dataOut[3] = data % 10;
 25c:	43 83       	std	Z+3, r20	; 0x03
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <SaveEepromMode>:

void SaveEepromMode(void)
{
	if(flag.tempEepromWrite)
 264:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 268:	85 ff       	sbrs	r24, 5
 26a:	0c c0       	rjmp	.+24     	; 0x284 <SaveEepromMode+0x20>
	{
		eeprom_write_word(&setTempEeprom,setTemp);
 26c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <setTemp>
 270:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <setTemp+0x1>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	db d1       	rcall	.+950    	; 0x630 <eeprom_write_word>
		flag.tempEepromWrite = FALSE;
 27a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
	}
	flag.eepromWrite = FALSE;
 284:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
 28e:	08 95       	ret

00000290 <LcdInit>:

#include "lcd.h"

void LcdInit(void)
{
	LCD_DDR = 0xFF;			//port out
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	94 b9       	out	0x04, r25	; 4
	DIG_DDR |= DIG_MASK;	//port out
 294:	87 b1       	in	r24, 0x07	; 7
 296:	88 63       	ori	r24, 0x38	; 56
 298:	87 b9       	out	0x07, r24	; 7
	DIG_PORT |= DIG_MASK;	//hight level, off all digits
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	88 63       	ori	r24, 0x38	; 56
 29e:	88 b9       	out	0x08, r24	; 8
	LCD_PORT = 0xFF; //Off all segments
 2a0:	95 b9       	out	0x05, r25	; 5
 2a2:	08 95       	ret

000002a4 <LcdUpdate>:
}

void LcdUpdate(uint8_t* data)
{
	static uint8_t count = 0;
	DIG_PORT |= DIG_MASK; //Off all digits
 2a4:	28 b1       	in	r18, 0x08	; 8
 2a6:	28 63       	ori	r18, 0x38	; 56
 2a8:	28 b9       	out	0x08, r18	; 8
	if(count == 0)
 2aa:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count.1771>
 2ae:	21 11       	cpse	r18, r1
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <LcdUpdate+0x12>
	{
		DIG_PORT &= ~(1 << DIG_3);
 2b2:	45 98       	cbi	0x08, 5	; 8
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
        /* View mode heating */
	}
	else if(count == 1)
 2b6:	21 30       	cpi	r18, 0x01	; 1
 2b8:	11 f4       	brne	.+4      	; 0x2be <LcdUpdate+0x1a>
	{
		DIG_PORT &= ~(1 << DIG_2);
 2ba:	44 98       	cbi	0x08, 4	; 8
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LcdUpdate+0x20>
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
	}
	else if(count == 2)
 2be:	22 30       	cpi	r18, 0x02	; 2
 2c0:	61 f4       	brne	.+24     	; 0x2da <LcdUpdate+0x36>
	{
		DIG_PORT &= ~(1 << DIG_1);
 2c2:	43 98       	cbi	0x08, 3	; 8
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
 2c4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count.1771>
 2c8:	fc 01       	movw	r30, r24
 2ca:	e2 0f       	add	r30, r18
 2cc:	f1 1d       	adc	r31, r1
 2ce:	e1 81       	ldd	r30, Z+1	; 0x01
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 5b       	subi	r30, 0xB0	; 176
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	e4 91       	lpm	r30, Z
 2d8:	e5 b9       	out	0x05, r30	; 5
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 2da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count.1771>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
	if(count > 2)
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <LcdUpdate+0x46>
		DIG_PORT &= ~(1 << DIG_1);
		LCD_PORT = pgm_read_byte(sevenSegmentCod + data[count + 1]);
		/* if (flag.digPoint) */
		/* 	LCD_PORT |= (1 << DIG_P); */
	}
	count ++;
 2e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count.1771>
 2e8:	08 95       	ret
	if(count > 2)
		count = 0;
 2ea:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count.1771>
 2ee:	08 95       	ret

000002f0 <ENC_Init>:
static uint8_t encState = 0;
static volatile int16_t encValue = 0;

void ENC_Init(int16_t startValue)
{
	ENC_DDR &= ~ENC_MASK;// In
 2f0:	2a b1       	in	r18, 0x0a	; 10
 2f2:	2f 73       	andi	r18, 0x3F	; 63
 2f4:	2a b9       	out	0x0a, r18	; 10
	ENC_PORT |= ENC_MASK;//Pull-up
 2f6:	2b b1       	in	r18, 0x0b	; 11
 2f8:	20 6c       	ori	r18, 0xC0	; 192
 2fa:	2b b9       	out	0x0b, r18	; 11
	encValue = startValue << 2;
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <encValue+0x1>
 308:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <encValue>
 30c:	08 95       	ret

0000030e <ENC_Scan>:
}

uint8_t  ENC_Scan(int16_t* value)
{
 30e:	dc 01       	movw	r26, r24
	uint8_t newState = ENC_PIN >> 6;
 310:	99 b1       	in	r25, 0x09	; 9
 312:	92 95       	swap	r25
 314:	96 95       	lsr	r25
 316:	96 95       	lsr	r25
 318:	93 70       	andi	r25, 0x03	; 3
	uint8_t fullState = newState | (encState << 2);
	switch (fullState) 
 31a:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <encState>
 31e:	24 e0       	ldi	r18, 0x04	; 4
 320:	42 9f       	mul	r20, r18
 322:	a0 01       	movw	r20, r0
 324:	11 24       	eor	r1, r1
 326:	e9 2f       	mov	r30, r25
 328:	e4 2b       	or	r30, r20
 32a:	4e 2f       	mov	r20, r30
 32c:	ee 0f       	add	r30, r30
 32e:	55 0b       	sbc	r21, r21
 330:	66 0b       	sbc	r22, r22
 332:	77 0b       	sbc	r23, r23
 334:	fa 01       	movw	r30, r20
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	ee 30       	cpi	r30, 0x0E	; 14
 33a:	f1 05       	cpc	r31, r1
 33c:	c8 f5       	brcc	.+114    	; 0x3b0 <ENC_Scan+0xa2>
 33e:	e6 5e       	subi	r30, 0xE6	; 230
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	09 94       	ijmp
	{
		case 0x2: case 0x4: case 0xB: case 0xD:
			encValue--;
 344:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <encValue>
 348:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <encValue+0x1>
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	31 09       	sbc	r19, r1
 350:	06 c0       	rjmp	.+12     	; 0x35e <ENC_Scan+0x50>
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
 352:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <encValue>
 356:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <encValue+0x1>
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <encValue+0x1>
 362:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <encValue>
			break;
		default:
			return FALSE;
			break;
	}
	encState = newState;
 366:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <encState>
	if (encValue > 1000) 
 36a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 36e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 372:	89 3e       	cpi	r24, 0xE9	; 233
 374:	93 40       	sbci	r25, 0x03	; 3
 376:	34 f0       	brlt	.+12     	; 0x384 <ENC_Scan+0x76>
	{
		encValue = 1000;
 378:	88 ee       	ldi	r24, 0xE8	; 232
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <encValue+0x1>
 380:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <encValue>
	}
	if (encValue < 0) 
 384:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <encValue>
 388:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <encValue+0x1>
 38c:	97 ff       	sbrs	r25, 7
 38e:	04 c0       	rjmp	.+8      	; 0x398 <ENC_Scan+0x8a>
	{
		encValue = 0;
 390:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <encValue+0x1>
 394:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <encValue>
	}
	*value = encValue >> 2;
 398:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <encValue>
 39c:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <encValue+0x1>
 3a0:	35 95       	asr	r19
 3a2:	27 95       	ror	r18
 3a4:	35 95       	asr	r19
 3a6:	27 95       	ror	r18
 3a8:	2d 93       	st	X+, r18
 3aa:	3c 93       	st	X, r19
	return TRUE;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	08 95       	ret
			break;
		case 0x1: case 0x7: case 0x8: case 0xE:
			encValue++;
			break;
		default:
			return FALSE;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		encValue = 0;
	}
	*value = encValue >> 2;
	return TRUE;
}
 3b2:	08 95       	ret

000003b4 <main>:
uint8_t a = 0;
uint16_t data = 312;

int main(void)
{
	UsartInit();
 3b4:	6f d0       	rcall	.+222    	; 0x494 <UsartInit>
	LcdInit();
 3b6:	6c df       	rcall	.-296    	; 0x290 <LcdInit>
	Timer0Init();
 3b8:	77 de       	rcall	.-786    	; 0xa8 <Timer0Init>
	/* ADCInit(); */
	Init();
 3ba:	6c de       	rcall	.-808    	; 0x94 <Init>
	ENC_Init(setTemp);
 3bc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <setTemp>
 3c0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <setTemp+0x1>
 3c4:	95 df       	rcall	.-214    	; 0x2f0 <ENC_Init>
	sei();
 3c6:	78 94       	sei
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3c8:	80 ed       	ldi	r24, 0xD0	; 208
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 3d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	flag.setTempVisible = TRUE;
 3d4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
		if (flag.keyScan) 
		{
			flag.keyScan = 0;	
			if (ENC_Scan(&setTemp)) 
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 3de:	c8 eb       	ldi	r28, 0xB8	; 184
 3e0:	db e0       	ldi	r29, 0x0B	; 11
				flag.tempEepromWrite = TRUE;
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 3e2:	00 ed       	ldi	r16, 0xD0	; 208
 3e4:	17 e0       	ldi	r17, 0x07	; 7
		{
			flag.readTemp = 0;
			if (a == 0) 
			{
				LED_ON;
				a = 1;
 3e6:	ff 24       	eor	r15, r15
 3e8:	f3 94       	inc	r15
	sei();
	countSetTempVisible = TIME_SET_TEMP_VISIBLE;
	flag.setTempVisible = TRUE;
	while(1)
	{
		if (flag.keyScan) 
 3ea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3ee:	80 ff       	sbrs	r24, 0
 3f0:	1c c0       	rjmp	.+56     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			flag.keyScan = 0;	
 3f2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 3f6:	8e 7f       	andi	r24, 0xFE	; 254
 3f8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
			if (ENC_Scan(&setTemp)) 
 3fc:	85 e1       	ldi	r24, 0x15	; 21
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	86 df       	rcall	.-244    	; 0x30e <ENC_Scan>
 402:	88 23       	and	r24, r24
 404:	91 f0       	breq	.+36     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				countTimeWriteEeprom = TIME_WRITE_EEPROM;
 406:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <countTimeWriteEeprom+0x1>
 40a:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <countTimeWriteEeprom>
				flag.tempEepromWrite = TRUE;
 40e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 412:	80 62       	ori	r24, 0x20	; 32
 414:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
				countSetTempVisible = TIME_SET_TEMP_VISIBLE;
 418:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <__data_end+0x1>
 41c:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <__data_end>
				flag.setTempVisible = TRUE;
 420:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 424:	80 64       	ori	r24, 0x40	; 64
 426:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
			}
		}
		if(flag.eepromWrite)
 42a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 42e:	83 fd       	sbrc	r24, 3
		{
			SaveEepromMode();
 430:	19 df       	rcall	.-462    	; 0x264 <SaveEepromMode>
		}
		if (flag.setTempVisible) 
 432:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
		{
			ResultBcd(setTemp, dataOut_);
 436:	67 e0       	ldi	r22, 0x07	; 7
 438:	71 e0       	ldi	r23, 0x01	; 1
		}
		if(flag.eepromWrite)
		{
			SaveEepromMode();
		}
		if (flag.setTempVisible) 
 43a:	86 ff       	sbrs	r24, 6
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			ResultBcd(setTemp, dataOut_);
 43e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <setTemp>
 442:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <setTemp+0x1>
 446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}
		else
		{
			ResultBcd(data, dataOut_);
 448:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 44c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <data+0x1>
 450:	f3 de       	rcall	.-538    	; 0x238 <ResultBcd>
		}
		if (flag.lcdUpdate) 
 452:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 456:	81 ff       	sbrs	r24, 1
 458:	08 c0       	rjmp	.+16     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			LcdUpdate(dataOut_);	
 45a:	87 e0       	ldi	r24, 0x07	; 7
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	22 df       	rcall	.-444    	; 0x2a4 <LcdUpdate>
			flag.lcdUpdate = 0;
 460:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag>
 464:	8d 7f       	andi	r24, 0xFD	; 253
 466:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <flag>
		}
		if (flag.readTemp) 
 46a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 46e:	80 ff       	sbrs	r24, 0
 470:	bc cf       	rjmp	.-136    	; 0x3ea <main+0x36>
		{
			flag.readTemp = 0;
 472:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag+0x1>
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag+0x1>
			if (a == 0) 
 47c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <a>
 480:	81 11       	cpse	r24, r1
 482:	04 c0       	rjmp	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			{
				LED_ON;
 484:	5b 98       	cbi	0x0b, 3	; 11
				a = 1;
 486:	f0 92 14 01 	sts	0x0114, r15	; 0x800114 <a>
 48a:	af cf       	rjmp	.-162    	; 0x3ea <main+0x36>
			}		
			else {
				LED_OFF;
 48c:	5b 9a       	sbi	0x0b, 3	; 11
				a = 0;
 48e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <a>
 492:	ab cf       	rjmp	.-170    	; 0x3ea <main+0x36>

00000494 <UsartInit>:
volatile uint8_t rxHeadBuffer;
volatile uint8_t rxCountBuffer;

void UsartInit(void){
	uint16_t i = USART_BAUDRATE_DIV;
	UBRR0L = i;
 494:	89 e1       	ldi	r24, 0x19	; 25
 496:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UBRR0H = i >> 8;
 49a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//8-bit ,1-stop bit,no parity
 49e:	e2 ec       	ldi	r30, 0xC2	; 194
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	86 60       	ori	r24, 0x06	; 6
 4a6:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) |
 4a8:	e1 ec       	ldi	r30, 0xC1	; 193
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	88 6d       	ori	r24, 0xD8	; 216
 4b0:	80 83       	st	Z, r24
 4b2:	08 95       	ret

000004b4 <UsartPutChar>:
			(1 << RXCIE0);//enable tx ,enable interrupt tx
}

void UsartPutChar(uint8_t ch){
	if(bit_is_set(UCSR0A,UDRE0) && txCountBuffer == 0)
 4b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 4b8:	95 ff       	sbrs	r25, 5
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <UsartPutChar+0x16>
 4bc:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 4c0:	91 11       	cpse	r25, r1
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <UsartPutChar+0x16>
		UDR0 = ch;
 4c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 4c8:	08 95       	ret
	else if(txCountBuffer < USART_TX_BUFFER_SIZE){
 4ca:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 4ce:	94 31       	cpi	r25, 0x14	; 20
 4d0:	b0 f4       	brcc	.+44     	; 0x4fe <UsartPutChar+0x4a>
		txCountBuffer ++;
 4d2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <txCountBuffer>
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <txCountBuffer>
		usartTxBuffer[txHeadBuffer] = ch;
 4dc:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <txHeadBuffer>
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e1 5d       	subi	r30, 0xD1	; 209
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	80 83       	st	Z, r24
		txHeadBuffer ++;
 4e8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <txHeadBuffer>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <txHeadBuffer>
		if(txHeadBuffer == USART_TX_BUFFER_SIZE)
 4f2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <txHeadBuffer>
 4f6:	84 31       	cpi	r24, 0x14	; 20
 4f8:	11 f4       	brne	.+4      	; 0x4fe <UsartPutChar+0x4a>
			txHeadBuffer = 0;
 4fa:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <txHeadBuffer>
 4fe:	08 95       	ret

00000500 <UsartPutString>:
	}
}

void UsartPutString(uint8_t *string){
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ec 01       	movw	r28, r24
	while(*string){
 506:	89 91       	ld	r24, Y+
 508:	88 23       	and	r24, r24
 50a:	11 f0       	breq	.+4      	; 0x510 <UsartPutString+0x10>
		UsartPutChar(*string);
 50c:	d3 df       	rcall	.-90     	; 0x4b4 <UsartPutChar>
 50e:	fb cf       	rjmp	.-10     	; 0x506 <UsartPutString+0x6>
		string++;
	}
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <UsartGetChar>:

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
	if(rxCountBuffer){
 516:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 51a:	88 23       	and	r24, r24
 51c:	b9 f0       	breq	.+46     	; 0x54c <UsartGetChar+0x36>
		ch = usartRxBuffer[rxTailBuffer];
 51e:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <rxTailBuffer>
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	e5 5e       	subi	r30, 0xE5	; 229
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	80 81       	ld	r24, Z
		rxCountBuffer --;
 52a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <rxCountBuffer>
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <rxCountBuffer>
		rxTailBuffer ++;
 534:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <rxTailBuffer>
 538:	9f 5f       	subi	r25, 0xFF	; 255
 53a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <rxTailBuffer>
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
 53e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <rxTailBuffer>
 542:	94 31       	cpi	r25, 0x14	; 20
 544:	21 f4       	brne	.+8      	; 0x54e <UsartGetChar+0x38>
			rxTailBuffer = 0;
 546:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxTailBuffer>
 54a:	08 95       	ret
		string++;
	}
}

uint8_t  UsartGetChar(void){
	uint8_t ch = 0;
 54c:	80 e0       	ldi	r24, 0x00	; 0
		rxTailBuffer ++;
		if(rxTailBuffer == USART_RX_BUFFER_SIZE)
			rxTailBuffer = 0;
	}
	return ch;
}
 54e:	08 95       	ret

00000550 <__vector_20>:

ISR(USART_TX_vect)
{
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	8f 93       	push	r24
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	if(txCountBuffer){
 560:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txCountBuffer>
 564:	88 23       	and	r24, r24
 566:	c1 f0       	breq	.+48     	; 0x598 <__vector_20+0x48>
		UDR0	= usartTxBuffer[txTailBuffer];
 568:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <txTailBuffer>
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	e1 5d       	subi	r30, 0xD1	; 209
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	80 81       	ld	r24, Z
 574:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
		txCountBuffer --;
 578:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txCountBuffer>
 57c:	81 50       	subi	r24, 0x01	; 1
 57e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txCountBuffer>
		txTailBuffer ++;
 582:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txTailBuffer>
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txTailBuffer>
		if(txTailBuffer == USART_TX_BUFFER_SIZE)
 58c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txTailBuffer>
 590:	84 31       	cpi	r24, 0x14	; 20
 592:	11 f4       	brne	.+4      	; 0x598 <__vector_20+0x48>
			txTailBuffer = 0;
 594:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <txTailBuffer>
	}
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	8f 91       	pop	r24
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__vector_18>:

ISR(USART_RX_vect){
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	8f 93       	push	r24
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
	if(rxCountBuffer < USART_RX_BUFFER_SIZE){
 5b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 5bc:	84 31       	cpi	r24, 0x14	; 20
 5be:	c0 f4       	brcc	.+48     	; 0x5f0 <__vector_18+0x48>
		usartRxBuffer[rxHeadBuffer] = UDR0;
 5c0:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <rxHeadBuffer>
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 5ca:	e5 5e       	subi	r30, 0xE5	; 229
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	80 83       	st	Z, r24
		rxHeadBuffer ++;
 5d0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rxHeadBuffer>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rxHeadBuffer>
		rxCountBuffer ++;
 5da:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rxCountBuffer>
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <rxCountBuffer>
		if(rxHeadBuffer ==  USART_TX_BUFFER_SIZE)
 5e4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rxHeadBuffer>
 5e8:	84 31       	cpi	r24, 0x14	; 20
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__vector_18+0x48>
			rxHeadBuffer = 0;
 5ec:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rxHeadBuffer>
	}
}
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	8f 91       	pop	r24
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__udivmodhi4>:
 600:	aa 1b       	sub	r26, r26
 602:	bb 1b       	sub	r27, r27
 604:	51 e1       	ldi	r21, 0x11	; 17
 606:	07 c0       	rjmp	.+14     	; 0x616 <__udivmodhi4_ep>

00000608 <__udivmodhi4_loop>:
 608:	aa 1f       	adc	r26, r26
 60a:	bb 1f       	adc	r27, r27
 60c:	a6 17       	cp	r26, r22
 60e:	b7 07       	cpc	r27, r23
 610:	10 f0       	brcs	.+4      	; 0x616 <__udivmodhi4_ep>
 612:	a6 1b       	sub	r26, r22
 614:	b7 0b       	sbc	r27, r23

00000616 <__udivmodhi4_ep>:
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	5a 95       	dec	r21
 61c:	a9 f7       	brne	.-22     	; 0x608 <__udivmodhi4_loop>
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	bc 01       	movw	r22, r24
 624:	cd 01       	movw	r24, r26
 626:	08 95       	ret

00000628 <eeprom_read_word>:
 628:	a8 e1       	ldi	r26, 0x18	; 24
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	42 e0       	ldi	r20, 0x02	; 2
 62e:	05 c0       	rjmp	.+10     	; 0x63a <eeprom_read_blraw>

00000630 <eeprom_write_word>:
 630:	11 d0       	rcall	.+34     	; 0x654 <eeprom_write_byte>
 632:	27 2f       	mov	r18, r23
 634:	10 c0       	rjmp	.+32     	; 0x656 <eeprom_write_r18>

00000636 <eeprom_read_block>:
 636:	dc 01       	movw	r26, r24
 638:	86 2f       	mov	r24, r22

0000063a <eeprom_read_blraw>:
 63a:	e8 2f       	mov	r30, r24
 63c:	f9 99       	sbic	0x1f, 1	; 31
 63e:	fe cf       	rjmp	.-4      	; 0x63c <eeprom_read_blraw+0x2>
 640:	12 bc       	out	0x22, r1	; 34
 642:	05 c0       	rjmp	.+10     	; 0x64e <eeprom_read_blraw+0x14>
 644:	e1 bd       	out	0x21, r30	; 33
 646:	f8 9a       	sbi	0x1f, 0	; 31
 648:	e3 95       	inc	r30
 64a:	00 b4       	in	r0, 0x20	; 32
 64c:	0d 92       	st	X+, r0
 64e:	41 50       	subi	r20, 0x01	; 1
 650:	c8 f7       	brcc	.-14     	; 0x644 <eeprom_read_blraw+0xa>
 652:	08 95       	ret

00000654 <eeprom_write_byte>:
 654:	26 2f       	mov	r18, r22

00000656 <eeprom_write_r18>:
 656:	f9 99       	sbic	0x1f, 1	; 31
 658:	fe cf       	rjmp	.-4      	; 0x656 <eeprom_write_r18>
 65a:	1f ba       	out	0x1f, r1	; 31
 65c:	12 bc       	out	0x22, r1	; 34
 65e:	81 bd       	out	0x21, r24	; 33
 660:	20 bd       	out	0x20, r18	; 32
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	fa 9a       	sbi	0x1f, 2	; 31
 668:	f9 9a       	sbi	0x1f, 1	; 31
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	08 95       	ret

00000670 <_exit>:
 670:	f8 94       	cli

00000672 <__stop_program>:
 672:	ff cf       	rjmp	.-2      	; 0x672 <__stop_program>
